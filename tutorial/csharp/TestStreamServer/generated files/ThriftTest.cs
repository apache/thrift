/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Thrift.Test
{
  public partial class ThriftTest {
    public interface Iface {
      /// <summary>
      /// Prints "testVoid()" and returns nothing.
      /// </summary>
      void testVoid();
      #if SILVERLIGHT
      IAsyncResult Begin_testVoid(AsyncCallback callback, object state);
      void End_testVoid(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Prints 'testString("%s")' with thing as '%s'
      /// @param string thing - the string to print
      /// @return string - returns the string 'thing'
      /// </summary>
      /// <param name="thing"></param>
      string testString(string thing);
      #if SILVERLIGHT
      IAsyncResult Begin_testString(AsyncCallback callback, object state, string thing);
      string End_testString(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Prints 'testByte("%d")' with thing as '%d'
      /// @param byte thing - the byte to print
      /// @return byte - returns the byte 'thing'
      /// </summary>
      /// <param name="thing"></param>
      sbyte testByte(sbyte thing);
      #if SILVERLIGHT
      IAsyncResult Begin_testByte(AsyncCallback callback, object state, sbyte thing);
      sbyte End_testByte(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Prints 'testI32("%d")' with thing as '%d'
      /// @param i32 thing - the i32 to print
      /// @return i32 - returns the i32 'thing'
      /// </summary>
      /// <param name="thing"></param>
      int testI32(int thing);
      #if SILVERLIGHT
      IAsyncResult Begin_testI32(AsyncCallback callback, object state, int thing);
      int End_testI32(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Prints 'testI64("%d")' with thing as '%d'
      /// @param i64 thing - the i64 to print
      /// @return i64 - returns the i64 'thing'
      /// </summary>
      /// <param name="thing"></param>
      long testI64(long thing);
      #if SILVERLIGHT
      IAsyncResult Begin_testI64(AsyncCallback callback, object state, long thing);
      long End_testI64(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Prints 'testDouble("%f")' with thing as '%f'
      /// @param double thing - the double to print
      /// @return double - returns the double 'thing'
      /// </summary>
      /// <param name="thing"></param>
      double testDouble(double thing);
      #if SILVERLIGHT
      IAsyncResult Begin_testDouble(AsyncCallback callback, object state, double thing);
      double End_testDouble(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Prints 'testBinary("%s")' where '%s' is a hex-formatted string of thing's data
      /// @param binary  thing - the binary data to print
      /// @return binary  - returns the binary 'thing'
      /// </summary>
      /// <param name="thing"></param>
      byte[] testBinary(byte[] thing);
      #if SILVERLIGHT
      IAsyncResult Begin_testBinary(AsyncCallback callback, object state, byte[] thing);
      byte[] End_testBinary(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Prints 'testStruct("{%s}")' where thing has been formatted into a string of comma separated values
      /// @param Xtruct thing - the Xtruct to print
      /// @return Xtruct - returns the Xtruct 'thing'
      /// </summary>
      /// <param name="thing"></param>
      Xtruct testStruct(Xtruct thing);
      #if SILVERLIGHT
      IAsyncResult Begin_testStruct(AsyncCallback callback, object state, Xtruct thing);
      Xtruct End_testStruct(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Prints 'testNest("{%s}")' where thing has been formatted into a string of the nested struct
      /// @param Xtruct2 thing - the Xtruct2 to print
      /// @return Xtruct2 - returns the Xtruct2 'thing'
      /// </summary>
      /// <param name="thing"></param>
      Xtruct2 testNest(Xtruct2 thing);
      #if SILVERLIGHT
      IAsyncResult Begin_testNest(AsyncCallback callback, object state, Xtruct2 thing);
      Xtruct2 End_testNest(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Prints 'testMap("{%s")' where thing has been formatted into a string of  'key => value' pairs
      ///  separated by commas and new lines
      /// @param map<i32,i32> thing - the map<i32,i32> to print
      /// @return map<i32,i32> - returns the map<i32,i32> 'thing'
      /// </summary>
      /// <param name="thing"></param>
      Dictionary<int, int> testMap(Dictionary<int, int> thing);
      #if SILVERLIGHT
      IAsyncResult Begin_testMap(AsyncCallback callback, object state, Dictionary<int, int> thing);
      Dictionary<int, int> End_testMap(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Prints 'testStringMap("{%s}")' where thing has been formatted into a string of  'key => value' pairs
      ///  separated by commas and new lines
      /// @param map<string,string> thing - the map<string,string> to print
      /// @return map<string,string> - returns the map<string,string> 'thing'
      /// </summary>
      /// <param name="thing"></param>
      Dictionary<string, string> testStringMap(Dictionary<string, string> thing);
      #if SILVERLIGHT
      IAsyncResult Begin_testStringMap(AsyncCallback callback, object state, Dictionary<string, string> thing);
      Dictionary<string, string> End_testStringMap(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Prints 'testSet("{%s}")' where thing has been formatted into a string of  values
      ///  separated by commas and new lines
      /// @param set<i32> thing - the set<i32> to print
      /// @return set<i32> - returns the set<i32> 'thing'
      /// </summary>
      /// <param name="thing"></param>
      THashSet<int> testSet(THashSet<int> thing);
      #if SILVERLIGHT
      IAsyncResult Begin_testSet(AsyncCallback callback, object state, THashSet<int> thing);
      THashSet<int> End_testSet(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Prints 'testList("{%s}")' where thing has been formatted into a string of  values
      ///  separated by commas and new lines
      /// @param list<i32> thing - the list<i32> to print
      /// @return list<i32> - returns the list<i32> 'thing'
      /// </summary>
      /// <param name="thing"></param>
      List<int> testList(List<int> thing);
      #if SILVERLIGHT
      IAsyncResult Begin_testList(AsyncCallback callback, object state, List<int> thing);
      List<int> End_testList(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Prints 'testEnum("%d")' where thing has been formatted into it's numeric value
      /// @param Numberz thing - the Numberz to print
      /// @return Numberz - returns the Numberz 'thing'
      /// </summary>
      /// <param name="thing"></param>
      Numberz testEnum(Numberz thing);
      #if SILVERLIGHT
      IAsyncResult Begin_testEnum(AsyncCallback callback, object state, Numberz thing);
      Numberz End_testEnum(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Prints 'testTypedef("%d")' with thing as '%d'
      /// @param UserId thing - the UserId to print
      /// @return UserId - returns the UserId 'thing'
      /// </summary>
      /// <param name="thing"></param>
      long testTypedef(long thing);
      #if SILVERLIGHT
      IAsyncResult Begin_testTypedef(AsyncCallback callback, object state, long thing);
      long End_testTypedef(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Prints 'testMapMap("%d")' with hello as '%d'
      /// @param i32 hello - the i32 to print
      /// @return map<i32,map<i32,i32>> - returns a dictionary with these values:
      ///   {-4 => {-4 => -4, -3 => -3, -2 => -2, -1 => -1, }, 4 => {1 => 1, 2 => 2, 3 => 3, 4 => 4, }, }
      /// </summary>
      /// <param name="hello"></param>
      Dictionary<int, Dictionary<int, int>> testMapMap(int hello);
      #if SILVERLIGHT
      IAsyncResult Begin_testMapMap(AsyncCallback callback, object state, int hello);
      Dictionary<int, Dictionary<int, int>> End_testMapMap(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// So you think you've got this all worked, out eh?
      /// 
      /// Creates a the returned map with these values and prints it out:
      ///   { 1 => { 2 => argument,
      ///            3 => argument,
      ///          },
      ///     2 => { 6 => <empty Insanity struct>, },
      ///   }
      /// @return map<UserId, map<Numberz,Insanity>> - a map with the above values
      /// </summary>
      /// <param name="argument"></param>
      Dictionary<long, Dictionary<Numberz, Insanity>> testInsanity(Insanity argument);
      #if SILVERLIGHT
      IAsyncResult Begin_testInsanity(AsyncCallback callback, object state, Insanity argument);
      Dictionary<long, Dictionary<Numberz, Insanity>> End_testInsanity(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Prints 'testMulti()'
      /// @param byte arg0 -
      /// @param i32 arg1 -
      /// @param i64 arg2 -
      /// @param map<i16, string> arg3 -
      /// @param Numberz arg4 -
      /// @param UserId arg5 -
      /// @return Xtruct - returns an Xtruct with string_thing = "Hello2, byte_thing = arg0, i32_thing = arg1
      ///    and i64_thing = arg2
      /// </summary>
      /// <param name="arg0"></param>
      /// <param name="arg1"></param>
      /// <param name="arg2"></param>
      /// <param name="arg3"></param>
      /// <param name="arg4"></param>
      /// <param name="arg5"></param>
      Xtruct testMulti(sbyte arg0, int arg1, long arg2, Dictionary<short, string> arg3, Numberz arg4, long arg5);
      #if SILVERLIGHT
      IAsyncResult Begin_testMulti(AsyncCallback callback, object state, sbyte arg0, int arg1, long arg2, Dictionary<short, string> arg3, Numberz arg4, long arg5);
      Xtruct End_testMulti(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Print 'testException(%s)' with arg as '%s'
      /// @param string arg - a string indication what type of exception to throw
      /// if arg == "Xception" throw Xception with errorCode = 1001 and message = arg
      /// elsen if arg == "TException" throw TException
      /// else do not throw anything
      /// </summary>
      /// <param name="arg"></param>
      void testException(string arg);
      #if SILVERLIGHT
      IAsyncResult Begin_testException(AsyncCallback callback, object state, string arg);
      void End_testException(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Print 'testMultiException(%s, %s)' with arg0 as '%s' and arg1 as '%s'
      /// @param string arg - a string indication what type of exception to throw
      /// if arg0 == "Xception" throw Xception with errorCode = 1001 and message = "This is an Xception"
      /// elsen if arg0 == "Xception2" throw Xception2 with errorCode = 2002 and message = "This is an Xception2"
      /// else do not throw anything
      /// @return Xtruct - an Xtruct with string_thing = arg1
      /// </summary>
      /// <param name="arg0"></param>
      /// <param name="arg1"></param>
      Xtruct testMultiException(string arg0, string arg1);
      #if SILVERLIGHT
      IAsyncResult Begin_testMultiException(AsyncCallback callback, object state, string arg0, string arg1);
      Xtruct End_testMultiException(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Print 'testOneway(%d): Sleeping...' with secondsToSleep as '%d'
      /// sleep 'secondsToSleep'
      /// Print 'testOneway(%d): done sleeping!' with secondsToSleep as '%d'
      /// @param i32 secondsToSleep - the number of seconds to sleep
      /// </summary>
      /// <param name="secondsToSleep"></param>
      void testOneway(int secondsToSleep);
      #if SILVERLIGHT
      IAsyncResult Begin_testOneway(AsyncCallback callback, object state, int secondsToSleep);
      void End_testOneway(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_testVoid(AsyncCallback callback, object state)
      {
        return send_testVoid(callback, state);
      }

      public void End_testVoid(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_testVoid();
      }

      #endif

      /// <summary>
      /// Prints "testVoid()" and returns nothing.
      /// </summary>
      public void testVoid()
      {
        #if !SILVERLIGHT
        send_testVoid();
        recv_testVoid();

        #else
        var asyncResult = Begin_testVoid(null, null);
        End_testVoid(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testVoid(AsyncCallback callback, object state)
      #else
      public void send_testVoid()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testVoid", TMessageType.Call, seqid_));
        testVoid_args args = new testVoid_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_testVoid()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testVoid_result result = new testVoid_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testString(AsyncCallback callback, object state, string thing)
      {
        return send_testString(callback, state, thing);
      }

      public string End_testString(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testString();
      }

      #endif

      /// <summary>
      /// Prints 'testString("%s")' with thing as '%s'
      /// @param string thing - the string to print
      /// @return string - returns the string 'thing'
      /// </summary>
      /// <param name="thing"></param>
      public string testString(string thing)
      {
        #if !SILVERLIGHT
        send_testString(thing);
        return recv_testString();

        #else
        var asyncResult = Begin_testString(null, null, thing);
        return End_testString(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testString(AsyncCallback callback, object state, string thing)
      #else
      public void send_testString(string thing)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testString", TMessageType.Call, seqid_));
        testString_args args = new testString_args();
        args.Thing = thing;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_testString()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testString_result result = new testString_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testString failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testByte(AsyncCallback callback, object state, sbyte thing)
      {
        return send_testByte(callback, state, thing);
      }

      public sbyte End_testByte(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testByte();
      }

      #endif

      /// <summary>
      /// Prints 'testByte("%d")' with thing as '%d'
      /// @param byte thing - the byte to print
      /// @return byte - returns the byte 'thing'
      /// </summary>
      /// <param name="thing"></param>
      public sbyte testByte(sbyte thing)
      {
        #if !SILVERLIGHT
        send_testByte(thing);
        return recv_testByte();

        #else
        var asyncResult = Begin_testByte(null, null, thing);
        return End_testByte(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testByte(AsyncCallback callback, object state, sbyte thing)
      #else
      public void send_testByte(sbyte thing)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testByte", TMessageType.Call, seqid_));
        testByte_args args = new testByte_args();
        args.Thing = thing;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public sbyte recv_testByte()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testByte_result result = new testByte_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testByte failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testI32(AsyncCallback callback, object state, int thing)
      {
        return send_testI32(callback, state, thing);
      }

      public int End_testI32(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testI32();
      }

      #endif

      /// <summary>
      /// Prints 'testI32("%d")' with thing as '%d'
      /// @param i32 thing - the i32 to print
      /// @return i32 - returns the i32 'thing'
      /// </summary>
      /// <param name="thing"></param>
      public int testI32(int thing)
      {
        #if !SILVERLIGHT
        send_testI32(thing);
        return recv_testI32();

        #else
        var asyncResult = Begin_testI32(null, null, thing);
        return End_testI32(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testI32(AsyncCallback callback, object state, int thing)
      #else
      public void send_testI32(int thing)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testI32", TMessageType.Call, seqid_));
        testI32_args args = new testI32_args();
        args.Thing = thing;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_testI32()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testI32_result result = new testI32_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testI32 failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testI64(AsyncCallback callback, object state, long thing)
      {
        return send_testI64(callback, state, thing);
      }

      public long End_testI64(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testI64();
      }

      #endif

      /// <summary>
      /// Prints 'testI64("%d")' with thing as '%d'
      /// @param i64 thing - the i64 to print
      /// @return i64 - returns the i64 'thing'
      /// </summary>
      /// <param name="thing"></param>
      public long testI64(long thing)
      {
        #if !SILVERLIGHT
        send_testI64(thing);
        return recv_testI64();

        #else
        var asyncResult = Begin_testI64(null, null, thing);
        return End_testI64(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testI64(AsyncCallback callback, object state, long thing)
      #else
      public void send_testI64(long thing)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testI64", TMessageType.Call, seqid_));
        testI64_args args = new testI64_args();
        args.Thing = thing;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_testI64()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testI64_result result = new testI64_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testI64 failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testDouble(AsyncCallback callback, object state, double thing)
      {
        return send_testDouble(callback, state, thing);
      }

      public double End_testDouble(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testDouble();
      }

      #endif

      /// <summary>
      /// Prints 'testDouble("%f")' with thing as '%f'
      /// @param double thing - the double to print
      /// @return double - returns the double 'thing'
      /// </summary>
      /// <param name="thing"></param>
      public double testDouble(double thing)
      {
        #if !SILVERLIGHT
        send_testDouble(thing);
        return recv_testDouble();

        #else
        var asyncResult = Begin_testDouble(null, null, thing);
        return End_testDouble(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testDouble(AsyncCallback callback, object state, double thing)
      #else
      public void send_testDouble(double thing)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testDouble", TMessageType.Call, seqid_));
        testDouble_args args = new testDouble_args();
        args.Thing = thing;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public double recv_testDouble()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testDouble_result result = new testDouble_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testDouble failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testBinary(AsyncCallback callback, object state, byte[] thing)
      {
        return send_testBinary(callback, state, thing);
      }

      public byte[] End_testBinary(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testBinary();
      }

      #endif

      /// <summary>
      /// Prints 'testBinary("%s")' where '%s' is a hex-formatted string of thing's data
      /// @param binary  thing - the binary data to print
      /// @return binary  - returns the binary 'thing'
      /// </summary>
      /// <param name="thing"></param>
      public byte[] testBinary(byte[] thing)
      {
        #if !SILVERLIGHT
        send_testBinary(thing);
        return recv_testBinary();

        #else
        var asyncResult = Begin_testBinary(null, null, thing);
        return End_testBinary(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testBinary(AsyncCallback callback, object state, byte[] thing)
      #else
      public void send_testBinary(byte[] thing)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testBinary", TMessageType.Call, seqid_));
        testBinary_args args = new testBinary_args();
        args.Thing = thing;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_testBinary()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testBinary_result result = new testBinary_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testBinary failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testStruct(AsyncCallback callback, object state, Xtruct thing)
      {
        return send_testStruct(callback, state, thing);
      }

      public Xtruct End_testStruct(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testStruct();
      }

      #endif

      /// <summary>
      /// Prints 'testStruct("{%s}")' where thing has been formatted into a string of comma separated values
      /// @param Xtruct thing - the Xtruct to print
      /// @return Xtruct - returns the Xtruct 'thing'
      /// </summary>
      /// <param name="thing"></param>
      public Xtruct testStruct(Xtruct thing)
      {
        #if !SILVERLIGHT
        send_testStruct(thing);
        return recv_testStruct();

        #else
        var asyncResult = Begin_testStruct(null, null, thing);
        return End_testStruct(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testStruct(AsyncCallback callback, object state, Xtruct thing)
      #else
      public void send_testStruct(Xtruct thing)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testStruct", TMessageType.Call, seqid_));
        testStruct_args args = new testStruct_args();
        args.Thing = thing;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Xtruct recv_testStruct()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testStruct_result result = new testStruct_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testStruct failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testNest(AsyncCallback callback, object state, Xtruct2 thing)
      {
        return send_testNest(callback, state, thing);
      }

      public Xtruct2 End_testNest(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testNest();
      }

      #endif

      /// <summary>
      /// Prints 'testNest("{%s}")' where thing has been formatted into a string of the nested struct
      /// @param Xtruct2 thing - the Xtruct2 to print
      /// @return Xtruct2 - returns the Xtruct2 'thing'
      /// </summary>
      /// <param name="thing"></param>
      public Xtruct2 testNest(Xtruct2 thing)
      {
        #if !SILVERLIGHT
        send_testNest(thing);
        return recv_testNest();

        #else
        var asyncResult = Begin_testNest(null, null, thing);
        return End_testNest(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testNest(AsyncCallback callback, object state, Xtruct2 thing)
      #else
      public void send_testNest(Xtruct2 thing)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testNest", TMessageType.Call, seqid_));
        testNest_args args = new testNest_args();
        args.Thing = thing;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Xtruct2 recv_testNest()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testNest_result result = new testNest_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testNest failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testMap(AsyncCallback callback, object state, Dictionary<int, int> thing)
      {
        return send_testMap(callback, state, thing);
      }

      public Dictionary<int, int> End_testMap(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testMap();
      }

      #endif

      /// <summary>
      /// Prints 'testMap("{%s")' where thing has been formatted into a string of  'key => value' pairs
      ///  separated by commas and new lines
      /// @param map<i32,i32> thing - the map<i32,i32> to print
      /// @return map<i32,i32> - returns the map<i32,i32> 'thing'
      /// </summary>
      /// <param name="thing"></param>
      public Dictionary<int, int> testMap(Dictionary<int, int> thing)
      {
        #if !SILVERLIGHT
        send_testMap(thing);
        return recv_testMap();

        #else
        var asyncResult = Begin_testMap(null, null, thing);
        return End_testMap(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testMap(AsyncCallback callback, object state, Dictionary<int, int> thing)
      #else
      public void send_testMap(Dictionary<int, int> thing)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testMap", TMessageType.Call, seqid_));
        testMap_args args = new testMap_args();
        args.Thing = thing;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<int, int> recv_testMap()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testMap_result result = new testMap_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testMap failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testStringMap(AsyncCallback callback, object state, Dictionary<string, string> thing)
      {
        return send_testStringMap(callback, state, thing);
      }

      public Dictionary<string, string> End_testStringMap(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testStringMap();
      }

      #endif

      /// <summary>
      /// Prints 'testStringMap("{%s}")' where thing has been formatted into a string of  'key => value' pairs
      ///  separated by commas and new lines
      /// @param map<string,string> thing - the map<string,string> to print
      /// @return map<string,string> - returns the map<string,string> 'thing'
      /// </summary>
      /// <param name="thing"></param>
      public Dictionary<string, string> testStringMap(Dictionary<string, string> thing)
      {
        #if !SILVERLIGHT
        send_testStringMap(thing);
        return recv_testStringMap();

        #else
        var asyncResult = Begin_testStringMap(null, null, thing);
        return End_testStringMap(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testStringMap(AsyncCallback callback, object state, Dictionary<string, string> thing)
      #else
      public void send_testStringMap(Dictionary<string, string> thing)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testStringMap", TMessageType.Call, seqid_));
        testStringMap_args args = new testStringMap_args();
        args.Thing = thing;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<string, string> recv_testStringMap()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testStringMap_result result = new testStringMap_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testStringMap failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testSet(AsyncCallback callback, object state, THashSet<int> thing)
      {
        return send_testSet(callback, state, thing);
      }

      public THashSet<int> End_testSet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testSet();
      }

      #endif

      /// <summary>
      /// Prints 'testSet("{%s}")' where thing has been formatted into a string of  values
      ///  separated by commas and new lines
      /// @param set<i32> thing - the set<i32> to print
      /// @return set<i32> - returns the set<i32> 'thing'
      /// </summary>
      /// <param name="thing"></param>
      public THashSet<int> testSet(THashSet<int> thing)
      {
        #if !SILVERLIGHT
        send_testSet(thing);
        return recv_testSet();

        #else
        var asyncResult = Begin_testSet(null, null, thing);
        return End_testSet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testSet(AsyncCallback callback, object state, THashSet<int> thing)
      #else
      public void send_testSet(THashSet<int> thing)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testSet", TMessageType.Call, seqid_));
        testSet_args args = new testSet_args();
        args.Thing = thing;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public THashSet<int> recv_testSet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testSet_result result = new testSet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testSet failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testList(AsyncCallback callback, object state, List<int> thing)
      {
        return send_testList(callback, state, thing);
      }

      public List<int> End_testList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testList();
      }

      #endif

      /// <summary>
      /// Prints 'testList("{%s}")' where thing has been formatted into a string of  values
      ///  separated by commas and new lines
      /// @param list<i32> thing - the list<i32> to print
      /// @return list<i32> - returns the list<i32> 'thing'
      /// </summary>
      /// <param name="thing"></param>
      public List<int> testList(List<int> thing)
      {
        #if !SILVERLIGHT
        send_testList(thing);
        return recv_testList();

        #else
        var asyncResult = Begin_testList(null, null, thing);
        return End_testList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testList(AsyncCallback callback, object state, List<int> thing)
      #else
      public void send_testList(List<int> thing)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testList", TMessageType.Call, seqid_));
        testList_args args = new testList_args();
        args.Thing = thing;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<int> recv_testList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testList_result result = new testList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testEnum(AsyncCallback callback, object state, Numberz thing)
      {
        return send_testEnum(callback, state, thing);
      }

      public Numberz End_testEnum(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testEnum();
      }

      #endif

      /// <summary>
      /// Prints 'testEnum("%d")' where thing has been formatted into it's numeric value
      /// @param Numberz thing - the Numberz to print
      /// @return Numberz - returns the Numberz 'thing'
      /// </summary>
      /// <param name="thing"></param>
      public Numberz testEnum(Numberz thing)
      {
        #if !SILVERLIGHT
        send_testEnum(thing);
        return recv_testEnum();

        #else
        var asyncResult = Begin_testEnum(null, null, thing);
        return End_testEnum(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testEnum(AsyncCallback callback, object state, Numberz thing)
      #else
      public void send_testEnum(Numberz thing)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testEnum", TMessageType.Call, seqid_));
        testEnum_args args = new testEnum_args();
        args.Thing = thing;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Numberz recv_testEnum()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testEnum_result result = new testEnum_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testEnum failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testTypedef(AsyncCallback callback, object state, long thing)
      {
        return send_testTypedef(callback, state, thing);
      }

      public long End_testTypedef(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testTypedef();
      }

      #endif

      /// <summary>
      /// Prints 'testTypedef("%d")' with thing as '%d'
      /// @param UserId thing - the UserId to print
      /// @return UserId - returns the UserId 'thing'
      /// </summary>
      /// <param name="thing"></param>
      public long testTypedef(long thing)
      {
        #if !SILVERLIGHT
        send_testTypedef(thing);
        return recv_testTypedef();

        #else
        var asyncResult = Begin_testTypedef(null, null, thing);
        return End_testTypedef(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testTypedef(AsyncCallback callback, object state, long thing)
      #else
      public void send_testTypedef(long thing)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testTypedef", TMessageType.Call, seqid_));
        testTypedef_args args = new testTypedef_args();
        args.Thing = thing;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_testTypedef()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testTypedef_result result = new testTypedef_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testTypedef failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testMapMap(AsyncCallback callback, object state, int hello)
      {
        return send_testMapMap(callback, state, hello);
      }

      public Dictionary<int, Dictionary<int, int>> End_testMapMap(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testMapMap();
      }

      #endif

      /// <summary>
      /// Prints 'testMapMap("%d")' with hello as '%d'
      /// @param i32 hello - the i32 to print
      /// @return map<i32,map<i32,i32>> - returns a dictionary with these values:
      ///   {-4 => {-4 => -4, -3 => -3, -2 => -2, -1 => -1, }, 4 => {1 => 1, 2 => 2, 3 => 3, 4 => 4, }, }
      /// </summary>
      /// <param name="hello"></param>
      public Dictionary<int, Dictionary<int, int>> testMapMap(int hello)
      {
        #if !SILVERLIGHT
        send_testMapMap(hello);
        return recv_testMapMap();

        #else
        var asyncResult = Begin_testMapMap(null, null, hello);
        return End_testMapMap(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testMapMap(AsyncCallback callback, object state, int hello)
      #else
      public void send_testMapMap(int hello)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testMapMap", TMessageType.Call, seqid_));
        testMapMap_args args = new testMapMap_args();
        args.Hello = hello;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<int, Dictionary<int, int>> recv_testMapMap()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testMapMap_result result = new testMapMap_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testMapMap failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testInsanity(AsyncCallback callback, object state, Insanity argument)
      {
        return send_testInsanity(callback, state, argument);
      }

      public Dictionary<long, Dictionary<Numberz, Insanity>> End_testInsanity(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testInsanity();
      }

      #endif

      /// <summary>
      /// So you think you've got this all worked, out eh?
      /// 
      /// Creates a the returned map with these values and prints it out:
      ///   { 1 => { 2 => argument,
      ///            3 => argument,
      ///          },
      ///     2 => { 6 => <empty Insanity struct>, },
      ///   }
      /// @return map<UserId, map<Numberz,Insanity>> - a map with the above values
      /// </summary>
      /// <param name="argument"></param>
      public Dictionary<long, Dictionary<Numberz, Insanity>> testInsanity(Insanity argument)
      {
        #if !SILVERLIGHT
        send_testInsanity(argument);
        return recv_testInsanity();

        #else
        var asyncResult = Begin_testInsanity(null, null, argument);
        return End_testInsanity(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testInsanity(AsyncCallback callback, object state, Insanity argument)
      #else
      public void send_testInsanity(Insanity argument)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testInsanity", TMessageType.Call, seqid_));
        testInsanity_args args = new testInsanity_args();
        args.Argument = argument;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Dictionary<long, Dictionary<Numberz, Insanity>> recv_testInsanity()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testInsanity_result result = new testInsanity_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testInsanity failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testMulti(AsyncCallback callback, object state, sbyte arg0, int arg1, long arg2, Dictionary<short, string> arg3, Numberz arg4, long arg5)
      {
        return send_testMulti(callback, state, arg0, arg1, arg2, arg3, arg4, arg5);
      }

      public Xtruct End_testMulti(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testMulti();
      }

      #endif

      /// <summary>
      /// Prints 'testMulti()'
      /// @param byte arg0 -
      /// @param i32 arg1 -
      /// @param i64 arg2 -
      /// @param map<i16, string> arg3 -
      /// @param Numberz arg4 -
      /// @param UserId arg5 -
      /// @return Xtruct - returns an Xtruct with string_thing = "Hello2, byte_thing = arg0, i32_thing = arg1
      ///    and i64_thing = arg2
      /// </summary>
      /// <param name="arg0"></param>
      /// <param name="arg1"></param>
      /// <param name="arg2"></param>
      /// <param name="arg3"></param>
      /// <param name="arg4"></param>
      /// <param name="arg5"></param>
      public Xtruct testMulti(sbyte arg0, int arg1, long arg2, Dictionary<short, string> arg3, Numberz arg4, long arg5)
      {
        #if !SILVERLIGHT
        send_testMulti(arg0, arg1, arg2, arg3, arg4, arg5);
        return recv_testMulti();

        #else
        var asyncResult = Begin_testMulti(null, null, arg0, arg1, arg2, arg3, arg4, arg5);
        return End_testMulti(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testMulti(AsyncCallback callback, object state, sbyte arg0, int arg1, long arg2, Dictionary<short, string> arg3, Numberz arg4, long arg5)
      #else
      public void send_testMulti(sbyte arg0, int arg1, long arg2, Dictionary<short, string> arg3, Numberz arg4, long arg5)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testMulti", TMessageType.Call, seqid_));
        testMulti_args args = new testMulti_args();
        args.Arg0 = arg0;
        args.Arg1 = arg1;
        args.Arg2 = arg2;
        args.Arg3 = arg3;
        args.Arg4 = arg4;
        args.Arg5 = arg5;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Xtruct recv_testMulti()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testMulti_result result = new testMulti_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testMulti failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testException(AsyncCallback callback, object state, string arg)
      {
        return send_testException(callback, state, arg);
      }

      public void End_testException(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_testException();
      }

      #endif

      /// <summary>
      /// Print 'testException(%s)' with arg as '%s'
      /// @param string arg - a string indication what type of exception to throw
      /// if arg == "Xception" throw Xception with errorCode = 1001 and message = arg
      /// elsen if arg == "TException" throw TException
      /// else do not throw anything
      /// </summary>
      /// <param name="arg"></param>
      public void testException(string arg)
      {
        #if !SILVERLIGHT
        send_testException(arg);
        recv_testException();

        #else
        var asyncResult = Begin_testException(null, null, arg);
        End_testException(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testException(AsyncCallback callback, object state, string arg)
      #else
      public void send_testException(string arg)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testException", TMessageType.Call, seqid_));
        testException_args args = new testException_args();
        args.Arg = arg;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_testException()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testException_result result = new testException_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.err1) {
          throw result.Err1;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testMultiException(AsyncCallback callback, object state, string arg0, string arg1)
      {
        return send_testMultiException(callback, state, arg0, arg1);
      }

      public Xtruct End_testMultiException(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testMultiException();
      }

      #endif

      /// <summary>
      /// Print 'testMultiException(%s, %s)' with arg0 as '%s' and arg1 as '%s'
      /// @param string arg - a string indication what type of exception to throw
      /// if arg0 == "Xception" throw Xception with errorCode = 1001 and message = "This is an Xception"
      /// elsen if arg0 == "Xception2" throw Xception2 with errorCode = 2002 and message = "This is an Xception2"
      /// else do not throw anything
      /// @return Xtruct - an Xtruct with string_thing = arg1
      /// </summary>
      /// <param name="arg0"></param>
      /// <param name="arg1"></param>
      public Xtruct testMultiException(string arg0, string arg1)
      {
        #if !SILVERLIGHT
        send_testMultiException(arg0, arg1);
        return recv_testMultiException();

        #else
        var asyncResult = Begin_testMultiException(null, null, arg0, arg1);
        return End_testMultiException(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testMultiException(AsyncCallback callback, object state, string arg0, string arg1)
      #else
      public void send_testMultiException(string arg0, string arg1)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testMultiException", TMessageType.Call, seqid_));
        testMultiException_args args = new testMultiException_args();
        args.Arg0 = arg0;
        args.Arg1 = arg1;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Xtruct recv_testMultiException()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testMultiException_result result = new testMultiException_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err1) {
          throw result.Err1;
        }
        if (result.__isset.err2) {
          throw result.Err2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testMultiException failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_testOneway(AsyncCallback callback, object state, int secondsToSleep)
      {
        return send_testOneway(callback, state, secondsToSleep);
      }

      public void End_testOneway(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      /// <summary>
      /// Print 'testOneway(%d): Sleeping...' with secondsToSleep as '%d'
      /// sleep 'secondsToSleep'
      /// Print 'testOneway(%d): done sleeping!' with secondsToSleep as '%d'
      /// @param i32 secondsToSleep - the number of seconds to sleep
      /// </summary>
      /// <param name="secondsToSleep"></param>
      public void testOneway(int secondsToSleep)
      {
        #if !SILVERLIGHT
        send_testOneway(secondsToSleep);

        #else
        var asyncResult = Begin_testOneway(null, null, secondsToSleep);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testOneway(AsyncCallback callback, object state, int secondsToSleep)
      #else
      public void send_testOneway(int secondsToSleep)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("testOneway", TMessageType.Oneway, seqid_));
        testOneway_args args = new testOneway_args();
        args.SecondsToSleep = secondsToSleep;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["testVoid"] = testVoid_Process;
        processMap_["testString"] = testString_Process;
        processMap_["testByte"] = testByte_Process;
        processMap_["testI32"] = testI32_Process;
        processMap_["testI64"] = testI64_Process;
        processMap_["testDouble"] = testDouble_Process;
        processMap_["testBinary"] = testBinary_Process;
        processMap_["testStruct"] = testStruct_Process;
        processMap_["testNest"] = testNest_Process;
        processMap_["testMap"] = testMap_Process;
        processMap_["testStringMap"] = testStringMap_Process;
        processMap_["testSet"] = testSet_Process;
        processMap_["testList"] = testList_Process;
        processMap_["testEnum"] = testEnum_Process;
        processMap_["testTypedef"] = testTypedef_Process;
        processMap_["testMapMap"] = testMapMap_Process;
        processMap_["testInsanity"] = testInsanity_Process;
        processMap_["testMulti"] = testMulti_Process;
        processMap_["testException"] = testException_Process;
        processMap_["testMultiException"] = testMultiException_Process;
        processMap_["testOneway"] = testOneway_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void testVoid_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testVoid_args args = new testVoid_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testVoid_result result = new testVoid_result();
        iface_.testVoid();
        oprot.WriteMessageBegin(new TMessage("testVoid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testString_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testString_args args = new testString_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testString_result result = new testString_result();
        result.Success = iface_.testString(args.Thing);
        oprot.WriteMessageBegin(new TMessage("testString", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testByte_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testByte_args args = new testByte_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testByte_result result = new testByte_result();
        result.Success = iface_.testByte(args.Thing);
        oprot.WriteMessageBegin(new TMessage("testByte", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testI32_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testI32_args args = new testI32_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testI32_result result = new testI32_result();
        result.Success = iface_.testI32(args.Thing);
        oprot.WriteMessageBegin(new TMessage("testI32", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testI64_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testI64_args args = new testI64_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testI64_result result = new testI64_result();
        result.Success = iface_.testI64(args.Thing);
        oprot.WriteMessageBegin(new TMessage("testI64", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testDouble_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testDouble_args args = new testDouble_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testDouble_result result = new testDouble_result();
        result.Success = iface_.testDouble(args.Thing);
        oprot.WriteMessageBegin(new TMessage("testDouble", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testBinary_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testBinary_args args = new testBinary_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testBinary_result result = new testBinary_result();
        result.Success = iface_.testBinary(args.Thing);
        oprot.WriteMessageBegin(new TMessage("testBinary", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testStruct_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testStruct_args args = new testStruct_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testStruct_result result = new testStruct_result();
        result.Success = iface_.testStruct(args.Thing);
        oprot.WriteMessageBegin(new TMessage("testStruct", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testNest_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testNest_args args = new testNest_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testNest_result result = new testNest_result();
        result.Success = iface_.testNest(args.Thing);
        oprot.WriteMessageBegin(new TMessage("testNest", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testMap_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testMap_args args = new testMap_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testMap_result result = new testMap_result();
        result.Success = iface_.testMap(args.Thing);
        oprot.WriteMessageBegin(new TMessage("testMap", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testStringMap_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testStringMap_args args = new testStringMap_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testStringMap_result result = new testStringMap_result();
        result.Success = iface_.testStringMap(args.Thing);
        oprot.WriteMessageBegin(new TMessage("testStringMap", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testSet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testSet_args args = new testSet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testSet_result result = new testSet_result();
        result.Success = iface_.testSet(args.Thing);
        oprot.WriteMessageBegin(new TMessage("testSet", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testList_args args = new testList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testList_result result = new testList_result();
        result.Success = iface_.testList(args.Thing);
        oprot.WriteMessageBegin(new TMessage("testList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testEnum_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testEnum_args args = new testEnum_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testEnum_result result = new testEnum_result();
        result.Success = iface_.testEnum(args.Thing);
        oprot.WriteMessageBegin(new TMessage("testEnum", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testTypedef_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testTypedef_args args = new testTypedef_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testTypedef_result result = new testTypedef_result();
        result.Success = iface_.testTypedef(args.Thing);
        oprot.WriteMessageBegin(new TMessage("testTypedef", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testMapMap_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testMapMap_args args = new testMapMap_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testMapMap_result result = new testMapMap_result();
        result.Success = iface_.testMapMap(args.Hello);
        oprot.WriteMessageBegin(new TMessage("testMapMap", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testInsanity_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testInsanity_args args = new testInsanity_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testInsanity_result result = new testInsanity_result();
        result.Success = iface_.testInsanity(args.Argument);
        oprot.WriteMessageBegin(new TMessage("testInsanity", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testMulti_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testMulti_args args = new testMulti_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testMulti_result result = new testMulti_result();
        result.Success = iface_.testMulti(args.Arg0, args.Arg1, args.Arg2, args.Arg3, args.Arg4, args.Arg5);
        oprot.WriteMessageBegin(new TMessage("testMulti", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testException_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testException_args args = new testException_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testException_result result = new testException_result();
        try {
          iface_.testException(args.Arg);
        } catch (Xception err1) {
          result.Err1 = err1;
        }
        oprot.WriteMessageBegin(new TMessage("testException", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testMultiException_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testMultiException_args args = new testMultiException_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testMultiException_result result = new testMultiException_result();
        try {
          result.Success = iface_.testMultiException(args.Arg0, args.Arg1);
        } catch (Xception err1) {
          result.Err1 = err1;
        } catch (Xception2 err2) {
          result.Err2 = err2;
        }
        oprot.WriteMessageBegin(new TMessage("testMultiException", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testOneway_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testOneway_args args = new testOneway_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.testOneway(args.SecondsToSleep);
        return;
      }
    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testVoid_args : TBase
    {

      public testVoid_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testVoid_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testVoid_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testVoid_result : TBase
    {

      public testVoid_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testVoid_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testVoid_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testString_args : TBase
    {
      private string _thing;

      public string Thing
      {
        get
        {
          return _thing;
        }
        set
        {
          __isset.thing = true;
          this._thing = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool thing;
      }

      public testString_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Thing = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testString_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Thing != null && __isset.thing) {
          field.Name = "thing";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Thing);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testString_args(");
        bool __first = true;
        if (Thing != null && __isset.thing) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Thing: ");
          __sb.Append(Thing);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testString_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testString_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testString_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testString_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testByte_args : TBase
    {
      private sbyte _thing;

      public sbyte Thing
      {
        get
        {
          return _thing;
        }
        set
        {
          __isset.thing = true;
          this._thing = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool thing;
      }

      public testByte_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                Thing = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testByte_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.thing) {
          field.Name = "thing";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Thing);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testByte_args(");
        bool __first = true;
        if (__isset.thing) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Thing: ");
          __sb.Append(Thing);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testByte_result : TBase
    {
      private sbyte _success;

      public sbyte Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testByte_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Byte) {
                Success = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testByte_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Byte;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testByte_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testI32_args : TBase
    {
      private int _thing;

      public int Thing
      {
        get
        {
          return _thing;
        }
        set
        {
          __isset.thing = true;
          this._thing = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool thing;
      }

      public testI32_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Thing = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testI32_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.thing) {
          field.Name = "thing";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Thing);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testI32_args(");
        bool __first = true;
        if (__isset.thing) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Thing: ");
          __sb.Append(Thing);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testI32_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testI32_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testI32_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testI32_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testI64_args : TBase
    {
      private long _thing;

      public long Thing
      {
        get
        {
          return _thing;
        }
        set
        {
          __isset.thing = true;
          this._thing = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool thing;
      }

      public testI64_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Thing = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testI64_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.thing) {
          field.Name = "thing";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Thing);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testI64_args(");
        bool __first = true;
        if (__isset.thing) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Thing: ");
          __sb.Append(Thing);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testI64_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testI64_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testI64_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testI64_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testDouble_args : TBase
    {
      private double _thing;

      public double Thing
      {
        get
        {
          return _thing;
        }
        set
        {
          __isset.thing = true;
          this._thing = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool thing;
      }

      public testDouble_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Double) {
                Thing = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testDouble_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.thing) {
          field.Name = "thing";
          field.Type = TType.Double;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Thing);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testDouble_args(");
        bool __first = true;
        if (__isset.thing) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Thing: ");
          __sb.Append(Thing);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testDouble_result : TBase
    {
      private double _success;

      public double Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testDouble_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Double) {
                Success = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testDouble_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Double;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testDouble_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testBinary_args : TBase
    {
      private byte[] _thing;

      public byte[] Thing
      {
        get
        {
          return _thing;
        }
        set
        {
          __isset.thing = true;
          this._thing = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool thing;
      }

      public testBinary_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Thing = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testBinary_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Thing != null && __isset.thing) {
          field.Name = "thing";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Thing);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testBinary_args(");
        bool __first = true;
        if (Thing != null && __isset.thing) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Thing: ");
          __sb.Append(Thing);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testBinary_result : TBase
    {
      private byte[] _success;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testBinary_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testBinary_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testBinary_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testStruct_args : TBase
    {
      private Xtruct _thing;

      public Xtruct Thing
      {
        get
        {
          return _thing;
        }
        set
        {
          __isset.thing = true;
          this._thing = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool thing;
      }

      public testStruct_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Thing = new Xtruct();
                Thing.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testStruct_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Thing != null && __isset.thing) {
          field.Name = "thing";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Thing.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testStruct_args(");
        bool __first = true;
        if (Thing != null && __isset.thing) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Thing: ");
          __sb.Append(Thing== null ? "<null>" : Thing.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testStruct_result : TBase
    {
      private Xtruct _success;

      public Xtruct Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testStruct_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Xtruct();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testStruct_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testStruct_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testNest_args : TBase
    {
      private Xtruct2 _thing;

      public Xtruct2 Thing
      {
        get
        {
          return _thing;
        }
        set
        {
          __isset.thing = true;
          this._thing = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool thing;
      }

      public testNest_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Thing = new Xtruct2();
                Thing.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testNest_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Thing != null && __isset.thing) {
          field.Name = "thing";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Thing.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testNest_args(");
        bool __first = true;
        if (Thing != null && __isset.thing) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Thing: ");
          __sb.Append(Thing== null ? "<null>" : Thing.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testNest_result : TBase
    {
      private Xtruct2 _success;

      public Xtruct2 Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testNest_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Xtruct2();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testNest_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testNest_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testMap_args : TBase
    {
      private Dictionary<int, int> _thing;

      public Dictionary<int, int> Thing
      {
        get
        {
          return _thing;
        }
        set
        {
          __isset.thing = true;
          this._thing = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool thing;
      }

      public testMap_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Thing = new Dictionary<int, int>();
                  TMap _map144 = iprot.ReadMapBegin();
                  for( int _i145 = 0; _i145 < _map144.Count; ++_i145)
                  {
                    int _key146;
                    int _val147;
                    _key146 = iprot.ReadI32();
                    _val147 = iprot.ReadI32();
                    Thing[_key146] = _val147;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testMap_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Thing != null && __isset.thing) {
          field.Name = "thing";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.I32, Thing.Count));
            foreach (int _iter148 in Thing.Keys)
            {
              oprot.WriteI32(_iter148);
              oprot.WriteI32(Thing[_iter148]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testMap_args(");
        bool __first = true;
        if (Thing != null && __isset.thing) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Thing: ");
          __sb.Append(Thing);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testMap_result : TBase
    {
      private Dictionary<int, int> _success;

      public Dictionary<int, int> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testMap_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<int, int>();
                  TMap _map149 = iprot.ReadMapBegin();
                  for( int _i150 = 0; _i150 < _map149.Count; ++_i150)
                  {
                    int _key151;
                    int _val152;
                    _key151 = iprot.ReadI32();
                    _val152 = iprot.ReadI32();
                    Success[_key151] = _val152;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testMap_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.I32, Success.Count));
              foreach (int _iter153 in Success.Keys)
              {
                oprot.WriteI32(_iter153);
                oprot.WriteI32(Success[_iter153]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testMap_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testStringMap_args : TBase
    {
      private Dictionary<string, string> _thing;

      public Dictionary<string, string> Thing
      {
        get
        {
          return _thing;
        }
        set
        {
          __isset.thing = true;
          this._thing = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool thing;
      }

      public testStringMap_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Thing = new Dictionary<string, string>();
                  TMap _map154 = iprot.ReadMapBegin();
                  for( int _i155 = 0; _i155 < _map154.Count; ++_i155)
                  {
                    string _key156;
                    string _val157;
                    _key156 = iprot.ReadString();
                    _val157 = iprot.ReadString();
                    Thing[_key156] = _val157;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testStringMap_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Thing != null && __isset.thing) {
          field.Name = "thing";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, Thing.Count));
            foreach (string _iter158 in Thing.Keys)
            {
              oprot.WriteString(_iter158);
              oprot.WriteString(Thing[_iter158]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testStringMap_args(");
        bool __first = true;
        if (Thing != null && __isset.thing) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Thing: ");
          __sb.Append(Thing);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testStringMap_result : TBase
    {
      private Dictionary<string, string> _success;

      public Dictionary<string, string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testStringMap_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map159 = iprot.ReadMapBegin();
                  for( int _i160 = 0; _i160 < _map159.Count; ++_i160)
                  {
                    string _key161;
                    string _val162;
                    _key161 = iprot.ReadString();
                    _val162 = iprot.ReadString();
                    Success[_key161] = _val162;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testStringMap_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
              foreach (string _iter163 in Success.Keys)
              {
                oprot.WriteString(_iter163);
                oprot.WriteString(Success[_iter163]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testStringMap_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testSet_args : TBase
    {
      private THashSet<int> _thing;

      public THashSet<int> Thing
      {
        get
        {
          return _thing;
        }
        set
        {
          __isset.thing = true;
          this._thing = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool thing;
      }

      public testSet_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Set) {
                {
                  Thing = new THashSet<int>();
                  TSet _set164 = iprot.ReadSetBegin();
                  for( int _i165 = 0; _i165 < _set164.Count; ++_i165)
                  {
                    int _elem166;
                    _elem166 = iprot.ReadI32();
                    Thing.Add(_elem166);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testSet_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Thing != null && __isset.thing) {
          field.Name = "thing";
          field.Type = TType.Set;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.I32, Thing.Count));
            foreach (int _iter167 in Thing)
            {
              oprot.WriteI32(_iter167);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testSet_args(");
        bool __first = true;
        if (Thing != null && __isset.thing) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Thing: ");
          __sb.Append(Thing);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testSet_result : TBase
    {
      private THashSet<int> _success;

      public THashSet<int> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testSet_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Set) {
                {
                  Success = new THashSet<int>();
                  TSet _set168 = iprot.ReadSetBegin();
                  for( int _i169 = 0; _i169 < _set168.Count; ++_i169)
                  {
                    int _elem170;
                    _elem170 = iprot.ReadI32();
                    Success.Add(_elem170);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testSet_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Set;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteSetBegin(new TSet(TType.I32, Success.Count));
              foreach (int _iter171 in Success)
              {
                oprot.WriteI32(_iter171);
              }
              oprot.WriteSetEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testSet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testList_args : TBase
    {
      private List<int> _thing;

      public List<int> Thing
      {
        get
        {
          return _thing;
        }
        set
        {
          __isset.thing = true;
          this._thing = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool thing;
      }

      public testList_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Thing = new List<int>();
                  TList _list172 = iprot.ReadListBegin();
                  for( int _i173 = 0; _i173 < _list172.Count; ++_i173)
                  {
                    int _elem174;
                    _elem174 = iprot.ReadI32();
                    Thing.Add(_elem174);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Thing != null && __isset.thing) {
          field.Name = "thing";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Thing.Count));
            foreach (int _iter175 in Thing)
            {
              oprot.WriteI32(_iter175);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testList_args(");
        bool __first = true;
        if (Thing != null && __isset.thing) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Thing: ");
          __sb.Append(Thing);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testList_result : TBase
    {
      private List<int> _success;

      public List<int> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list176 = iprot.ReadListBegin();
                  for( int _i177 = 0; _i177 < _list176.Count; ++_i177)
                  {
                    int _elem178;
                    _elem178 = iprot.ReadI32();
                    Success.Add(_elem178);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I32, Success.Count));
              foreach (int _iter179 in Success)
              {
                oprot.WriteI32(_iter179);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testEnum_args : TBase
    {
      private Numberz _thing;

      /// <summary>
      /// 
      /// <seealso cref="Numberz"/>
      /// </summary>
      public Numberz Thing
      {
        get
        {
          return _thing;
        }
        set
        {
          __isset.thing = true;
          this._thing = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool thing;
      }

      public testEnum_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Thing = (Numberz)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testEnum_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.thing) {
          field.Name = "thing";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Thing);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testEnum_args(");
        bool __first = true;
        if (__isset.thing) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Thing: ");
          __sb.Append(Thing);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testEnum_result : TBase
    {
      private Numberz _success;

      /// <summary>
      /// 
      /// <seealso cref="Numberz"/>
      /// </summary>
      public Numberz Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testEnum_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (Numberz)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testEnum_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testEnum_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testTypedef_args : TBase
    {
      private long _thing;

      public long Thing
      {
        get
        {
          return _thing;
        }
        set
        {
          __isset.thing = true;
          this._thing = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool thing;
      }

      public testTypedef_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Thing = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testTypedef_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.thing) {
          field.Name = "thing";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Thing);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testTypedef_args(");
        bool __first = true;
        if (__isset.thing) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Thing: ");
          __sb.Append(Thing);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testTypedef_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testTypedef_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testTypedef_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testTypedef_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testMapMap_args : TBase
    {
      private int _hello;

      public int Hello
      {
        get
        {
          return _hello;
        }
        set
        {
          __isset.hello = true;
          this._hello = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool hello;
      }

      public testMapMap_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Hello = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testMapMap_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.hello) {
          field.Name = "hello";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Hello);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testMapMap_args(");
        bool __first = true;
        if (__isset.hello) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Hello: ");
          __sb.Append(Hello);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testMapMap_result : TBase
    {
      private Dictionary<int, Dictionary<int, int>> _success;

      public Dictionary<int, Dictionary<int, int>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testMapMap_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<int, Dictionary<int, int>>();
                  TMap _map180 = iprot.ReadMapBegin();
                  for( int _i181 = 0; _i181 < _map180.Count; ++_i181)
                  {
                    int _key182;
                    Dictionary<int, int> _val183;
                    _key182 = iprot.ReadI32();
                    {
                      _val183 = new Dictionary<int, int>();
                      TMap _map184 = iprot.ReadMapBegin();
                      for( int _i185 = 0; _i185 < _map184.Count; ++_i185)
                      {
                        int _key186;
                        int _val187;
                        _key186 = iprot.ReadI32();
                        _val187 = iprot.ReadI32();
                        _val183[_key186] = _val187;
                      }
                      iprot.ReadMapEnd();
                    }
                    Success[_key182] = _val183;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testMapMap_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.Map, Success.Count));
              foreach (int _iter188 in Success.Keys)
              {
                oprot.WriteI32(_iter188);
                {
                  oprot.WriteMapBegin(new TMap(TType.I32, TType.I32, Success[_iter188].Count));
                  foreach (int _iter189 in Success[_iter188].Keys)
                  {
                    oprot.WriteI32(_iter189);
                    oprot.WriteI32(Success[_iter188][_iter189]);
                  }
                  oprot.WriteMapEnd();
                }
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testMapMap_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testInsanity_args : TBase
    {
      private Insanity _argument;

      public Insanity Argument
      {
        get
        {
          return _argument;
        }
        set
        {
          __isset.argument = true;
          this._argument = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool argument;
      }

      public testInsanity_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Argument = new Insanity();
                Argument.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testInsanity_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Argument != null && __isset.argument) {
          field.Name = "argument";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Argument.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testInsanity_args(");
        bool __first = true;
        if (Argument != null && __isset.argument) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Argument: ");
          __sb.Append(Argument== null ? "<null>" : Argument.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testInsanity_result : TBase
    {
      private Dictionary<long, Dictionary<Numberz, Insanity>> _success;

      public Dictionary<long, Dictionary<Numberz, Insanity>> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testInsanity_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<long, Dictionary<Numberz, Insanity>>();
                  TMap _map190 = iprot.ReadMapBegin();
                  for( int _i191 = 0; _i191 < _map190.Count; ++_i191)
                  {
                    long _key192;
                    Dictionary<Numberz, Insanity> _val193;
                    _key192 = iprot.ReadI64();
                    {
                      _val193 = new Dictionary<Numberz, Insanity>();
                      TMap _map194 = iprot.ReadMapBegin();
                      for( int _i195 = 0; _i195 < _map194.Count; ++_i195)
                      {
                        Numberz _key196;
                        Insanity _val197;
                        _key196 = (Numberz)iprot.ReadI32();
                        _val197 = new Insanity();
                        _val197.Read(iprot);
                        _val193[_key196] = _val197;
                      }
                      iprot.ReadMapEnd();
                    }
                    Success[_key192] = _val193;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testInsanity_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I64, TType.Map, Success.Count));
              foreach (long _iter198 in Success.Keys)
              {
                oprot.WriteI64(_iter198);
                {
                  oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Success[_iter198].Count));
                  foreach (Numberz _iter199 in Success[_iter198].Keys)
                  {
                    oprot.WriteI32((int)_iter199);
                    Success[_iter198][_iter199].Write(oprot);
                  }
                  oprot.WriteMapEnd();
                }
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testInsanity_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testMulti_args : TBase
    {
      private sbyte _arg0;
      private int _arg1;
      private long _arg2;
      private Dictionary<short, string> _arg3;
      private Numberz _arg4;
      private long _arg5;

      public sbyte Arg0
      {
        get
        {
          return _arg0;
        }
        set
        {
          __isset.arg0 = true;
          this._arg0 = value;
        }
      }

      public int Arg1
      {
        get
        {
          return _arg1;
        }
        set
        {
          __isset.arg1 = true;
          this._arg1 = value;
        }
      }

      public long Arg2
      {
        get
        {
          return _arg2;
        }
        set
        {
          __isset.arg2 = true;
          this._arg2 = value;
        }
      }

      public Dictionary<short, string> Arg3
      {
        get
        {
          return _arg3;
        }
        set
        {
          __isset.arg3 = true;
          this._arg3 = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="Numberz"/>
      /// </summary>
      public Numberz Arg4
      {
        get
        {
          return _arg4;
        }
        set
        {
          __isset.arg4 = true;
          this._arg4 = value;
        }
      }

      public long Arg5
      {
        get
        {
          return _arg5;
        }
        set
        {
          __isset.arg5 = true;
          this._arg5 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool arg0;
        public bool arg1;
        public bool arg2;
        public bool arg3;
        public bool arg4;
        public bool arg5;
      }

      public testMulti_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte) {
                Arg0 = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Arg1 = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Arg2 = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Map) {
                {
                  Arg3 = new Dictionary<short, string>();
                  TMap _map200 = iprot.ReadMapBegin();
                  for( int _i201 = 0; _i201 < _map200.Count; ++_i201)
                  {
                    short _key202;
                    string _val203;
                    _key202 = iprot.ReadI16();
                    _val203 = iprot.ReadString();
                    Arg3[_key202] = _val203;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Arg4 = (Numberz)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I64) {
                Arg5 = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testMulti_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.arg0) {
          field.Name = "arg0";
          field.Type = TType.Byte;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Arg0);
          oprot.WriteFieldEnd();
        }
        if (__isset.arg1) {
          field.Name = "arg1";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Arg1);
          oprot.WriteFieldEnd();
        }
        if (__isset.arg2) {
          field.Name = "arg2";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Arg2);
          oprot.WriteFieldEnd();
        }
        if (Arg3 != null && __isset.arg3) {
          field.Name = "arg3";
          field.Type = TType.Map;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I16, TType.String, Arg3.Count));
            foreach (short _iter204 in Arg3.Keys)
            {
              oprot.WriteI16(_iter204);
              oprot.WriteString(Arg3[_iter204]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.arg4) {
          field.Name = "arg4";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Arg4);
          oprot.WriteFieldEnd();
        }
        if (__isset.arg5) {
          field.Name = "arg5";
          field.Type = TType.I64;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Arg5);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testMulti_args(");
        bool __first = true;
        if (__isset.arg0) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Arg0: ");
          __sb.Append(Arg0);
        }
        if (__isset.arg1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Arg1: ");
          __sb.Append(Arg1);
        }
        if (__isset.arg2) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Arg2: ");
          __sb.Append(Arg2);
        }
        if (Arg3 != null && __isset.arg3) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Arg3: ");
          __sb.Append(Arg3);
        }
        if (__isset.arg4) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Arg4: ");
          __sb.Append(Arg4);
        }
        if (__isset.arg5) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Arg5: ");
          __sb.Append(Arg5);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testMulti_result : TBase
    {
      private Xtruct _success;

      public Xtruct Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testMulti_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Xtruct();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testMulti_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testMulti_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testException_args : TBase
    {
      private string _arg;

      public string Arg
      {
        get
        {
          return _arg;
        }
        set
        {
          __isset.arg = true;
          this._arg = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool arg;
      }

      public testException_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Arg = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testException_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Arg != null && __isset.arg) {
          field.Name = "arg";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Arg);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testException_args(");
        bool __first = true;
        if (Arg != null && __isset.arg) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Arg: ");
          __sb.Append(Arg);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testException_result : TBase
    {
      private Xception _err1;

      public Xception Err1
      {
        get
        {
          return _err1;
        }
        set
        {
          __isset.err1 = true;
          this._err1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool err1;
      }

      public testException_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Err1 = new Xception();
                Err1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testException_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.err1) {
          if (Err1 != null) {
            field.Name = "Err1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testException_result(");
        bool __first = true;
        if (Err1 != null && __isset.err1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err1: ");
          __sb.Append(Err1== null ? "<null>" : Err1.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testMultiException_args : TBase
    {
      private string _arg0;
      private string _arg1;

      public string Arg0
      {
        get
        {
          return _arg0;
        }
        set
        {
          __isset.arg0 = true;
          this._arg0 = value;
        }
      }

      public string Arg1
      {
        get
        {
          return _arg1;
        }
        set
        {
          __isset.arg1 = true;
          this._arg1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool arg0;
        public bool arg1;
      }

      public testMultiException_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Arg0 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Arg1 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testMultiException_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Arg0 != null && __isset.arg0) {
          field.Name = "arg0";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Arg0);
          oprot.WriteFieldEnd();
        }
        if (Arg1 != null && __isset.arg1) {
          field.Name = "arg1";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Arg1);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testMultiException_args(");
        bool __first = true;
        if (Arg0 != null && __isset.arg0) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Arg0: ");
          __sb.Append(Arg0);
        }
        if (Arg1 != null && __isset.arg1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Arg1: ");
          __sb.Append(Arg1);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testMultiException_result : TBase
    {
      private Xtruct _success;
      private Xception _err1;
      private Xception2 _err2;

      public Xtruct Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Xception Err1
      {
        get
        {
          return _err1;
        }
        set
        {
          __isset.err1 = true;
          this._err1 = value;
        }
      }

      public Xception2 Err2
      {
        get
        {
          return _err2;
        }
        set
        {
          __isset.err2 = true;
          this._err2 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err1;
        public bool err2;
      }

      public testMultiException_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Xtruct();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err1 = new Xception();
                Err1.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Err2 = new Xception2();
                Err2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testMultiException_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err1) {
          if (Err1 != null) {
            field.Name = "Err1";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err1.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.err2) {
          if (Err2 != null) {
            field.Name = "Err2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Err2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testMultiException_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Err1 != null && __isset.err1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err1: ");
          __sb.Append(Err1== null ? "<null>" : Err1.ToString());
        }
        if (Err2 != null && __isset.err2) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Err2: ");
          __sb.Append(Err2== null ? "<null>" : Err2.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testOneway_args : TBase
    {
      private int _secondsToSleep;

      public int SecondsToSleep
      {
        get
        {
          return _secondsToSleep;
        }
        set
        {
          __isset.secondsToSleep = true;
          this._secondsToSleep = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool secondsToSleep;
      }

      public testOneway_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                SecondsToSleep = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("testOneway_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.secondsToSleep) {
          field.Name = "secondsToSleep";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SecondsToSleep);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testOneway_args(");
        bool __first = true;
        if (__isset.secondsToSleep) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SecondsToSleep: ");
          __sb.Append(SecondsToSleep);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
