/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Thrift.Test
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NestedMixedx2 : TBase
  {
    private List<THashSet<int>> _int_set_list;
    private Dictionary<int, THashSet<string>> _map_int_strset;
    private List<Dictionary<int, THashSet<string>>> _map_int_strset_list;

    public List<THashSet<int>> Int_set_list
    {
      get
      {
        return _int_set_list;
      }
      set
      {
        __isset.int_set_list = true;
        this._int_set_list = value;
      }
    }

    public Dictionary<int, THashSet<string>> Map_int_strset
    {
      get
      {
        return _map_int_strset;
      }
      set
      {
        __isset.map_int_strset = true;
        this._map_int_strset = value;
      }
    }

    public List<Dictionary<int, THashSet<string>>> Map_int_strset_list
    {
      get
      {
        return _map_int_strset_list;
      }
      set
      {
        __isset.map_int_strset_list = true;
        this._map_int_strset_list = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool int_set_list;
      public bool map_int_strset;
      public bool map_int_strset_list;
    }

    public NestedMixedx2() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Int_set_list = new List<THashSet<int>>();
                TList _list98 = iprot.ReadListBegin();
                for( int _i99 = 0; _i99 < _list98.Count; ++_i99)
                {
                  THashSet<int> _elem100;
                  {
                    _elem100 = new THashSet<int>();
                    TSet _set101 = iprot.ReadSetBegin();
                    for( int _i102 = 0; _i102 < _set101.Count; ++_i102)
                    {
                      int _elem103;
                      _elem103 = iprot.ReadI32();
                      _elem100.Add(_elem103);
                    }
                    iprot.ReadSetEnd();
                  }
                  Int_set_list.Add(_elem100);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Map_int_strset = new Dictionary<int, THashSet<string>>();
                TMap _map104 = iprot.ReadMapBegin();
                for( int _i105 = 0; _i105 < _map104.Count; ++_i105)
                {
                  int _key106;
                  THashSet<string> _val107;
                  _key106 = iprot.ReadI32();
                  {
                    _val107 = new THashSet<string>();
                    TSet _set108 = iprot.ReadSetBegin();
                    for( int _i109 = 0; _i109 < _set108.Count; ++_i109)
                    {
                      string _elem110;
                      _elem110 = iprot.ReadString();
                      _val107.Add(_elem110);
                    }
                    iprot.ReadSetEnd();
                  }
                  Map_int_strset[_key106] = _val107;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Map_int_strset_list = new List<Dictionary<int, THashSet<string>>>();
                TList _list111 = iprot.ReadListBegin();
                for( int _i112 = 0; _i112 < _list111.Count; ++_i112)
                {
                  Dictionary<int, THashSet<string>> _elem113;
                  {
                    _elem113 = new Dictionary<int, THashSet<string>>();
                    TMap _map114 = iprot.ReadMapBegin();
                    for( int _i115 = 0; _i115 < _map114.Count; ++_i115)
                    {
                      int _key116;
                      THashSet<string> _val117;
                      _key116 = iprot.ReadI32();
                      {
                        _val117 = new THashSet<string>();
                        TSet _set118 = iprot.ReadSetBegin();
                        for( int _i119 = 0; _i119 < _set118.Count; ++_i119)
                        {
                          string _elem120;
                          _elem120 = iprot.ReadString();
                          _val117.Add(_elem120);
                        }
                        iprot.ReadSetEnd();
                      }
                      _elem113[_key116] = _val117;
                    }
                    iprot.ReadMapEnd();
                  }
                  Map_int_strset_list.Add(_elem113);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NestedMixedx2");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Int_set_list != null && __isset.int_set_list) {
        field.Name = "int_set_list";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Set, Int_set_list.Count));
          foreach (THashSet<int> _iter121 in Int_set_list)
          {
            {
              oprot.WriteSetBegin(new TSet(TType.I32, _iter121.Count));
              foreach (int _iter122 in _iter121)
              {
                oprot.WriteI32(_iter122);
              }
              oprot.WriteSetEnd();
            }
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Map_int_strset != null && __isset.map_int_strset) {
        field.Name = "map_int_strset";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Set, Map_int_strset.Count));
          foreach (int _iter123 in Map_int_strset.Keys)
          {
            oprot.WriteI32(_iter123);
            {
              oprot.WriteSetBegin(new TSet(TType.String, Map_int_strset[_iter123].Count));
              foreach (string _iter124 in Map_int_strset[_iter123])
              {
                oprot.WriteString(_iter124);
              }
              oprot.WriteSetEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Map_int_strset_list != null && __isset.map_int_strset_list) {
        field.Name = "map_int_strset_list";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Map, Map_int_strset_list.Count));
          foreach (Dictionary<int, THashSet<string>> _iter125 in Map_int_strset_list)
          {
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.Set, _iter125.Count));
              foreach (int _iter126 in _iter125.Keys)
              {
                oprot.WriteI32(_iter126);
                {
                  oprot.WriteSetBegin(new TSet(TType.String, _iter125[_iter126].Count));
                  foreach (string _iter127 in _iter125[_iter126])
                  {
                    oprot.WriteString(_iter127);
                  }
                  oprot.WriteSetEnd();
                }
              }
              oprot.WriteMapEnd();
            }
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NestedMixedx2(");
      bool __first = true;
      if (Int_set_list != null && __isset.int_set_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Int_set_list: ");
        __sb.Append(Int_set_list);
      }
      if (Map_int_strset != null && __isset.map_int_strset) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Map_int_strset: ");
        __sb.Append(Map_int_strset);
      }
      if (Map_int_strset_list != null && __isset.map_int_strset_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Map_int_strset_list: ");
        __sb.Append(Map_int_strset_list);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
