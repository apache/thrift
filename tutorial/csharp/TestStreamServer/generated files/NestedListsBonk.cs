/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Thrift.Test
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NestedListsBonk : TBase
  {
    private List<List<List<Bonk>>> _bonk;

    public List<List<List<Bonk>>> Bonk
    {
      get
      {
        return _bonk;
      }
      set
      {
        __isset.bonk = true;
        this._bonk = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool bonk;
    }

    public NestedListsBonk() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Bonk = new List<List<List<Bonk>>>();
                TList _list132 = iprot.ReadListBegin();
                for( int _i133 = 0; _i133 < _list132.Count; ++_i133)
                {
                  List<List<Bonk>> _elem134;
                  {
                    _elem134 = new List<List<Bonk>>();
                    TList _list135 = iprot.ReadListBegin();
                    for( int _i136 = 0; _i136 < _list135.Count; ++_i136)
                    {
                      List<Bonk> _elem137;
                      {
                        _elem137 = new List<Bonk>();
                        TList _list138 = iprot.ReadListBegin();
                        for( int _i139 = 0; _i139 < _list138.Count; ++_i139)
                        {
                          Bonk _elem140;
                          _elem140 = new Bonk();
                          _elem140.Read(iprot);
                          _elem137.Add(_elem140);
                        }
                        iprot.ReadListEnd();
                      }
                      _elem134.Add(_elem137);
                    }
                    iprot.ReadListEnd();
                  }
                  Bonk.Add(_elem134);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NestedListsBonk");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Bonk != null && __isset.bonk) {
        field.Name = "bonk";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.List, Bonk.Count));
          foreach (List<List<Bonk>> _iter141 in Bonk)
          {
            {
              oprot.WriteListBegin(new TList(TType.List, _iter141.Count));
              foreach (List<Bonk> _iter142 in _iter141)
              {
                {
                  oprot.WriteListBegin(new TList(TType.Struct, _iter142.Count));
                  foreach (Bonk _iter143 in _iter142)
                  {
                    _iter143.Write(oprot);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NestedListsBonk(");
      bool __first = true;
      if (Bonk != null && __isset.bonk) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bonk: ");
        __sb.Append(Bonk);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
