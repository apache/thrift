/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace ThriftAsync.Test
{

    [DataContract(Namespace="")]
    public partial class CrazyNesting : TBase
    {
        private string _string_field;
        private THashSet<Insanity> _set_field;
        private byte[] _binary_field;

        [DataMember(Order = 0)]
        public string String_field
        {
            get
            {
                return _string_field;
            }
            set
            {
                __isset.string_field = true;
                this._string_field = value;
            }
        }

        [DataMember(Order = 0)]
        public THashSet<Insanity> Set_field
        {
            get
            {
                return _set_field;
            }
            set
            {
                __isset.set_field = true;
                this._set_field = value;
            }
        }

        [DataMember(Order = 0)]
        public List<Dictionary<THashSet<int>, Dictionary<int, THashSet<List<Dictionary<Insanity, string>>>>>> List_field { get; set; }

        [DataMember(Order = 0)]
        public byte[] Binary_field
        {
            get
            {
                return _binary_field;
            }
            set
            {
                __isset.binary_field = true;
                this._binary_field = value;
            }
        }


        [DataMember(Order = 1)]
        public Isset __isset;
        [DataContract]
        public struct Isset
        {
            [DataMember]
            public bool string_field;
            [DataMember]
            public bool set_field;
            [DataMember]
            public bool binary_field;
        }

        #region XmlSerializer support

        public bool ShouldSerializeString_field()
        {
            return __isset.string_field;
        }

        public bool ShouldSerializeSet_field()
        {
            return __isset.set_field;
        }

        public bool ShouldSerializeBinary_field()
        {
            return __isset.binary_field;
        }

        #endregion XmlSerializer support

        public CrazyNesting()
        {
        }

        public CrazyNesting(List<Dictionary<THashSet<int>, Dictionary<int, THashSet<List<Dictionary<Insanity, string>>>>>> list_field) : this()
        {
            this.List_field = list_field;
        }

        public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                bool isset_list_field = false;
                TField field;
                await iprot.ReadStructBeginAsync(cancellationToken);
                while (true)
                {
                    field = await iprot.ReadFieldBeginAsync(cancellationToken);
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }

                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                String_field = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.Set)
                            {
                                {
                                    Set_field = new THashSet<Insanity>();
                                    TSet _set9 = await iprot.ReadSetBeginAsync(cancellationToken);
                                    for(int _i10 = 0; _i10 < _set9.Count; ++_i10)
                                    {
                                        Insanity _elem11;
                                        _elem11 = new Insanity();
                                        await _elem11.ReadAsync(iprot, cancellationToken);
                                        Set_field.Add(_elem11);
                                    }
                                    await iprot.ReadSetEndAsync(cancellationToken);
                                }
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    List_field = new List<Dictionary<THashSet<int>, Dictionary<int, THashSet<List<Dictionary<Insanity, string>>>>>>();
                                    TList _list12 = await iprot.ReadListBeginAsync(cancellationToken);
                                    for(int _i13 = 0; _i13 < _list12.Count; ++_i13)
                                    {
                                        Dictionary<THashSet<int>, Dictionary<int, THashSet<List<Dictionary<Insanity, string>>>>> _elem14;
                                        {
                                            _elem14 = new Dictionary<THashSet<int>, Dictionary<int, THashSet<List<Dictionary<Insanity, string>>>>>();
                                            TMap _map15 = await iprot.ReadMapBeginAsync(cancellationToken);
                                            for(int _i16 = 0; _i16 < _map15.Count; ++_i16)
                                            {
                                                THashSet<int> _key17;
                                                Dictionary<int, THashSet<List<Dictionary<Insanity, string>>>> _val18;
                                                {
                                                    _key17 = new THashSet<int>();
                                                    TSet _set19 = await iprot.ReadSetBeginAsync(cancellationToken);
                                                    for(int _i20 = 0; _i20 < _set19.Count; ++_i20)
                                                    {
                                                        int _elem21;
                                                        _elem21 = await iprot.ReadI32Async(cancellationToken);
                                                        _key17.Add(_elem21);
                                                    }
                                                    await iprot.ReadSetEndAsync(cancellationToken);
                                                }
                                                {
                                                    _val18 = new Dictionary<int, THashSet<List<Dictionary<Insanity, string>>>>();
                                                    TMap _map22 = await iprot.ReadMapBeginAsync(cancellationToken);
                                                    for(int _i23 = 0; _i23 < _map22.Count; ++_i23)
                                                    {
                                                        int _key24;
                                                        THashSet<List<Dictionary<Insanity, string>>> _val25;
                                                        _key24 = await iprot.ReadI32Async(cancellationToken);
                                                        {
                                                            _val25 = new THashSet<List<Dictionary<Insanity, string>>>();
                                                            TSet _set26 = await iprot.ReadSetBeginAsync(cancellationToken);
                                                            for(int _i27 = 0; _i27 < _set26.Count; ++_i27)
                                                            {
                                                                List<Dictionary<Insanity, string>> _elem28;
                                                                {
                                                                    _elem28 = new List<Dictionary<Insanity, string>>();
                                                                    TList _list29 = await iprot.ReadListBeginAsync(cancellationToken);
                                                                    for(int _i30 = 0; _i30 < _list29.Count; ++_i30)
                                                                    {
                                                                        Dictionary<Insanity, string> _elem31;
                                                                        {
                                                                            _elem31 = new Dictionary<Insanity, string>();
                                                                            TMap _map32 = await iprot.ReadMapBeginAsync(cancellationToken);
                                                                            for(int _i33 = 0; _i33 < _map32.Count; ++_i33)
                                                                            {
                                                                                Insanity _key34;
                                                                                string _val35;
                                                                                _key34 = new Insanity();
                                                                                await _key34.ReadAsync(iprot, cancellationToken);
                                                                                _val35 = await iprot.ReadStringAsync(cancellationToken);
                                                                                _elem31[_key34] = _val35;
                                                                            }
                                                                            await iprot.ReadMapEndAsync(cancellationToken);
                                                                        }
                                                                        _elem28.Add(_elem31);
                                                                    }
                                                                    await iprot.ReadListEndAsync(cancellationToken);
                                                                }
                                                                _val25.Add(_elem28);
                                                            }
                                                            await iprot.ReadSetEndAsync(cancellationToken);
                                                        }
                                                        _val18[_key24] = _val25;
                                                    }
                                                    await iprot.ReadMapEndAsync(cancellationToken);
                                                }
                                                _elem14[_key17] = _val18;
                                            }
                                            await iprot.ReadMapEndAsync(cancellationToken);
                                        }
                                        List_field.Add(_elem14);
                                    }
                                    await iprot.ReadListEndAsync(cancellationToken);
                                }
                                isset_list_field = true;
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.String)
                            {
                                Binary_field = await iprot.ReadBinaryAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        default: 
                            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            break;
                    }

                    await iprot.ReadFieldEndAsync(cancellationToken);
                }

                await iprot.ReadStructEndAsync(cancellationToken);
                if (!isset_list_field)
                {
                    throw new TProtocolException(TProtocolException.INVALID_DATA);
                }
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                var struc = new TStruct("CrazyNesting");
                await oprot.WriteStructBeginAsync(struc, cancellationToken);
                var field = new TField();
                if (String_field != null && __isset.string_field)
                {
                    field.Name = "string_field";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(String_field, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if (Set_field != null && __isset.set_field)
                {
                    field.Name = "set_field";
                    field.Type = TType.Set;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    {
                        await oprot.WriteSetBeginAsync(new TSet(TType.Struct, Set_field.Count), cancellationToken);
                        foreach (Insanity _iter36 in Set_field)
                        {
                            await _iter36.WriteAsync(oprot, cancellationToken);
                        }
                        await oprot.WriteSetEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                field.Name = "list_field";
                field.Type = TType.List;
                field.ID = 3;
                await oprot.WriteFieldBeginAsync(field, cancellationToken);
                {
                    await oprot.WriteListBeginAsync(new TList(TType.Map, List_field.Count), cancellationToken);
                    foreach (Dictionary<THashSet<int>, Dictionary<int, THashSet<List<Dictionary<Insanity, string>>>>> _iter37 in List_field)
                    {
                        {
                            await oprot.WriteMapBeginAsync(new TMap(TType.Set, TType.Map, _iter37.Count), cancellationToken);
                            foreach (THashSet<int> _iter38 in _iter37.Keys)
                            {
                                {
                                    await oprot.WriteSetBeginAsync(new TSet(TType.I32, _iter38.Count), cancellationToken);
                                    foreach (int _iter39 in _iter38)
                                    {
                                        await oprot.WriteI32Async(_iter39, cancellationToken);
                                    }
                                    await oprot.WriteSetEndAsync(cancellationToken);
                                }
                                {
                                    await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.Set, _iter37[_iter38].Count), cancellationToken);
                                    foreach (int _iter40 in _iter37[_iter38].Keys)
                                    {
                                        await oprot.WriteI32Async(_iter40, cancellationToken);
                                        {
                                            await oprot.WriteSetBeginAsync(new TSet(TType.List, _iter37[_iter38][_iter40].Count), cancellationToken);
                                            foreach (List<Dictionary<Insanity, string>> _iter41 in _iter37[_iter38][_iter40])
                                            {
                                                {
                                                    await oprot.WriteListBeginAsync(new TList(TType.Map, _iter41.Count), cancellationToken);
                                                    foreach (Dictionary<Insanity, string> _iter42 in _iter41)
                                                    {
                                                        {
                                                            await oprot.WriteMapBeginAsync(new TMap(TType.Struct, TType.String, _iter42.Count), cancellationToken);
                                                            foreach (Insanity _iter43 in _iter42.Keys)
                                                            {
                                                                await _iter43.WriteAsync(oprot, cancellationToken);
                                                                await oprot.WriteStringAsync(_iter42[_iter43], cancellationToken);
                                                            }
                                                            await oprot.WriteMapEndAsync(cancellationToken);
                                                        }
                                                    }
                                                    await oprot.WriteListEndAsync(cancellationToken);
                                                }
                                            }
                                            await oprot.WriteSetEndAsync(cancellationToken);
                                        }
                                    }
                                    await oprot.WriteMapEndAsync(cancellationToken);
                                }
                            }
                            await oprot.WriteMapEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteListEndAsync(cancellationToken);
                }
                await oprot.WriteFieldEndAsync(cancellationToken);
                if (Binary_field != null && __isset.binary_field)
                {
                    field.Name = "binary_field";
                    field.Type = TType.String;
                    field.ID = 4;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBinaryAsync(Binary_field, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                await oprot.WriteFieldStopAsync(cancellationToken);
                await oprot.WriteStructEndAsync(cancellationToken);
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            var sb = new StringBuilder("CrazyNesting(");
            bool __first = true;
            if (String_field != null && __isset.string_field)
            {
                if(!__first) { sb.Append(", "); }
                __first = false;
                sb.Append("String_field: ");
                sb.Append(String_field);
            }
            if (Set_field != null && __isset.set_field)
            {
                if(!__first) { sb.Append(", "); }
                __first = false;
                sb.Append("Set_field: ");
                sb.Append(Set_field);
            }
            if(!__first) { sb.Append(", "); }
            sb.Append("List_field: ");
            sb.Append(List_field);
            if (Binary_field != null && __isset.binary_field)
            {
                sb.Append(", Binary_field: ");
                sb.Append(Binary_field);
            }
            sb.Append(")");
            return sb.ToString();
        }
    }

}
