/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace ThriftAsync.Test
{

    [DataContract(Namespace="")]
    public partial class NestedListsI32x2 : TBase
    {
        private List<List<int>> _integerlist;

        [DataMember(Order = 0)]
        public List<List<int>> Integerlist
        {
            get
            {
                return _integerlist;
            }
            set
            {
                __isset.integerlist = true;
                this._integerlist = value;
            }
        }


        [DataMember(Order = 1)]
        public Isset __isset;
        [DataContract]
        public struct Isset
        {
            [DataMember]
            public bool integerlist;
        }

        #region XmlSerializer support

        public bool ShouldSerializeIntegerlist()
        {
            return __isset.integerlist;
        }

        #endregion XmlSerializer support

        public NestedListsI32x2()
        {
        }

        public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                await iprot.ReadStructBeginAsync(cancellationToken);
                while (true)
                {
                    field = await iprot.ReadFieldBeginAsync(cancellationToken);
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }

                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.List)
                            {
                                {
                                    Integerlist = new List<List<int>>();
                                    TList _list78 = await iprot.ReadListBeginAsync(cancellationToken);
                                    for(int _i79 = 0; _i79 < _list78.Count; ++_i79)
                                    {
                                        List<int> _elem80;
                                        {
                                            _elem80 = new List<int>();
                                            TList _list81 = await iprot.ReadListBeginAsync(cancellationToken);
                                            for(int _i82 = 0; _i82 < _list81.Count; ++_i82)
                                            {
                                                int _elem83;
                                                _elem83 = await iprot.ReadI32Async(cancellationToken);
                                                _elem80.Add(_elem83);
                                            }
                                            await iprot.ReadListEndAsync(cancellationToken);
                                        }
                                        Integerlist.Add(_elem80);
                                    }
                                    await iprot.ReadListEndAsync(cancellationToken);
                                }
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        default: 
                            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            break;
                    }

                    await iprot.ReadFieldEndAsync(cancellationToken);
                }

                await iprot.ReadStructEndAsync(cancellationToken);
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                var struc = new TStruct("NestedListsI32x2");
                await oprot.WriteStructBeginAsync(struc, cancellationToken);
                var field = new TField();
                if (Integerlist != null && __isset.integerlist)
                {
                    field.Name = "integerlist";
                    field.Type = TType.List;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    {
                        await oprot.WriteListBeginAsync(new TList(TType.List, Integerlist.Count), cancellationToken);
                        foreach (List<int> _iter84 in Integerlist)
                        {
                            {
                                await oprot.WriteListBeginAsync(new TList(TType.I32, _iter84.Count), cancellationToken);
                                foreach (int _iter85 in _iter84)
                                {
                                    await oprot.WriteI32Async(_iter85, cancellationToken);
                                }
                                await oprot.WriteListEndAsync(cancellationToken);
                            }
                        }
                        await oprot.WriteListEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                await oprot.WriteFieldStopAsync(cancellationToken);
                await oprot.WriteStructEndAsync(cancellationToken);
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            var sb = new StringBuilder("NestedListsI32x2(");
            bool __first = true;
            if (Integerlist != null && __isset.integerlist)
            {
                if(!__first) { sb.Append(", "); }
                __first = false;
                sb.Append("Integerlist: ");
                sb.Append(Integerlist);
            }
            sb.Append(")");
            return sb.ToString();
        }
    }

}
