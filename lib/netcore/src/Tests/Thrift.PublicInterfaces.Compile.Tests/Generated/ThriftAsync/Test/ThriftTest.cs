/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;

using Thrift.Protocols;
using Thrift.Protocols.Entities;
using Thrift.Protocols.Utilities;
using Thrift.Transports;
using Thrift.Transports.Client;
using Thrift.Transports.Server;


namespace ThriftAsync.Test
{
    public partial class ThriftTest
    {
        [ServiceContract(Namespace="")]
        public interface IAsync
        {
            /// <summary>
            /// Prints "testVoid()" and returns nothing.
            /// </summary>
            [OperationContract]
            Task testVoidAsync(CancellationToken cancellationToken);

            /// <summary>
            /// Prints 'testString("%s")' with thing as '%s'
            /// @param string thing - the string to print
            /// @return string - returns the string 'thing'
            /// </summary>
            /// <param name="thing"></param>
            [OperationContract]
            Task<string> testStringAsync(string thing, CancellationToken cancellationToken);

            /// <summary>
            /// Prints 'testBool("%s")' where '%s' with thing as 'true' or 'false'
            /// @param bool  thing - the bool data to print
            /// @return bool  - returns the bool 'thing'
            /// </summary>
            /// <param name="thing"></param>
            [OperationContract]
            Task<bool> testBoolAsync(bool thing, CancellationToken cancellationToken);

            /// <summary>
            /// Prints 'testByte("%d")' with thing as '%d'
            /// The types i8 and byte are synonyms, use of i8 is encouraged, byte still exists for the sake of compatibility.
            /// @param byte thing - the i8/byte to print
            /// @return i8 - returns the i8/byte 'thing'
            /// </summary>
            /// <param name="thing"></param>
            [OperationContract]
            Task<sbyte> testByteAsync(sbyte thing, CancellationToken cancellationToken);

            /// <summary>
            /// Prints 'testI32("%d")' with thing as '%d'
            /// @param i32 thing - the i32 to print
            /// @return i32 - returns the i32 'thing'
            /// </summary>
            /// <param name="thing"></param>
            [OperationContract]
            Task<int> testI32Async(int thing, CancellationToken cancellationToken);

            /// <summary>
            /// Prints 'testI64("%d")' with thing as '%d'
            /// @param i64 thing - the i64 to print
            /// @return i64 - returns the i64 'thing'
            /// </summary>
            /// <param name="thing"></param>
            [OperationContract]
            Task<long> testI64Async(long thing, CancellationToken cancellationToken);

            /// <summary>
            /// Prints 'testDouble("%f")' with thing as '%f'
            /// @param double thing - the double to print
            /// @return double - returns the double 'thing'
            /// </summary>
            /// <param name="thing"></param>
            [OperationContract]
            Task<double> testDoubleAsync(double thing, CancellationToken cancellationToken);

            /// <summary>
            /// Prints 'testBinary("%s")' where '%s' is a hex-formatted string of thing's data
            /// @param binary  thing - the binary data to print
            /// @return binary  - returns the binary 'thing'
            /// </summary>
            /// <param name="thing"></param>
            [OperationContract]
            Task<byte[]> testBinaryAsync(byte[] thing, CancellationToken cancellationToken);

            /// <summary>
            /// Prints 'testStruct("{%s}")' where thing has been formatted into a string of comma separated values
            /// @param Xtruct thing - the Xtruct to print
            /// @return Xtruct - returns the Xtruct 'thing'
            /// </summary>
            /// <param name="thing"></param>
            [OperationContract]
            Task<Xtruct> testStructAsync(Xtruct thing, CancellationToken cancellationToken);

            /// <summary>
            /// Prints 'testNest("{%s}")' where thing has been formatted into a string of the nested struct
            /// @param Xtruct2 thing - the Xtruct2 to print
            /// @return Xtruct2 - returns the Xtruct2 'thing'
            /// </summary>
            /// <param name="thing"></param>
            [OperationContract]
            Task<Xtruct2> testNestAsync(Xtruct2 thing, CancellationToken cancellationToken);

            /// <summary>
            /// Prints 'testMap("{%s")' where thing has been formatted into a string of  'key => value' pairs
            ///  separated by commas and new lines
            /// @param map<i32,i32> thing - the map<i32,i32> to print
            /// @return map<i32,i32> - returns the map<i32,i32> 'thing'
            /// </summary>
            /// <param name="thing"></param>
            [OperationContract]
            Task<Dictionary<int, int>> testMapAsync(Dictionary<int, int> thing, CancellationToken cancellationToken);

            /// <summary>
            /// Prints 'testStringMap("{%s}")' where thing has been formatted into a string of  'key => value' pairs
            ///  separated by commas and new lines
            /// @param map<string,string> thing - the map<string,string> to print
            /// @return map<string,string> - returns the map<string,string> 'thing'
            /// </summary>
            /// <param name="thing"></param>
            [OperationContract]
            Task<Dictionary<string, string>> testStringMapAsync(Dictionary<string, string> thing, CancellationToken cancellationToken);

            /// <summary>
            /// Prints 'testSet("{%s}")' where thing has been formatted into a string of  values
            ///  separated by commas and new lines
            /// @param set<i32> thing - the set<i32> to print
            /// @return set<i32> - returns the set<i32> 'thing'
            /// </summary>
            /// <param name="thing"></param>
            [OperationContract]
            Task<THashSet<int>> testSetAsync(THashSet<int> thing, CancellationToken cancellationToken);

            /// <summary>
            /// Prints 'testList("{%s}")' where thing has been formatted into a string of  values
            ///  separated by commas and new lines
            /// @param list<i32> thing - the list<i32> to print
            /// @return list<i32> - returns the list<i32> 'thing'
            /// </summary>
            /// <param name="thing"></param>
            [OperationContract]
            Task<List<int>> testListAsync(List<int> thing, CancellationToken cancellationToken);

            /// <summary>
            /// Prints 'testEnum("%d")' where thing has been formatted into it's numeric value
            /// @param Numberz thing - the Numberz to print
            /// @return Numberz - returns the Numberz 'thing'
            /// </summary>
            /// <param name="thing"></param>
            [OperationContract]
            Task<Numberz> testEnumAsync(Numberz thing, CancellationToken cancellationToken);

            /// <summary>
            /// Prints 'testTypedef("%d")' with thing as '%d'
            /// @param UserId thing - the UserId to print
            /// @return UserId - returns the UserId 'thing'
            /// </summary>
            /// <param name="thing"></param>
            [OperationContract]
            Task<long> testTypedefAsync(long thing, CancellationToken cancellationToken);

            /// <summary>
            /// Prints 'testMapMap("%d")' with hello as '%d'
            /// @param i32 hello - the i32 to print
            /// @return map<i32,map<i32,i32>> - returns a dictionary with these values:
            ///   {-4 => {-4 => -4, -3 => -3, -2 => -2, -1 => -1, }, 4 => {1 => 1, 2 => 2, 3 => 3, 4 => 4, }, }
            /// </summary>
            /// <param name="hello"></param>
            [OperationContract]
            Task<Dictionary<int, Dictionary<int, int>>> testMapMapAsync(int hello, CancellationToken cancellationToken);

            /// <summary>
            /// So you think you've got this all worked, out eh?
            /// 
            /// Creates a the returned map with these values and prints it out:
            ///   { 1 => { 2 => argument,
            ///            3 => argument,
            ///          },
            ///     2 => { 6 => <empty Insanity struct>, },
            ///   }
            /// @return map<UserId, map<Numberz,Insanity>> - a map with the above values
            /// </summary>
            /// <param name="argument"></param>
            [OperationContract]
            Task<Dictionary<long, Dictionary<Numberz, Insanity>>> testInsanityAsync(Insanity argument, CancellationToken cancellationToken);

            /// <summary>
            /// Prints 'testMulti()'
            /// @param byte arg0 -
            /// @param i32 arg1 -
            /// @param i64 arg2 -
            /// @param map<i16, string> arg3 -
            /// @param Numberz arg4 -
            /// @param UserId arg5 -
            /// @return Xtruct - returns an Xtruct with string_thing = "Hello2, byte_thing = arg0, i32_thing = arg1
            ///    and i64_thing = arg2
            /// </summary>
            /// <param name="arg0"></param>
            /// <param name="arg1"></param>
            /// <param name="arg2"></param>
            /// <param name="arg3"></param>
            /// <param name="arg4"></param>
            /// <param name="arg5"></param>
            [OperationContract]
            Task<Xtruct> testMultiAsync(sbyte arg0, int arg1, long arg2, Dictionary<short, string> arg3, Numberz arg4, long arg5, CancellationToken cancellationToken);

            /// <summary>
            /// Print 'testException(%s)' with arg as '%s'
            /// @param string arg - a string indication what type of exception to throw
            /// if arg == "Xception" throw Xception with errorCode = 1001 and message = arg
            /// elsen if arg == "TException" throw TException
            /// else do not throw anything
            /// </summary>
            /// <param name="arg"></param>
            [OperationContract]
            [FaultContract(typeof(XceptionFault))]
            Task testExceptionAsync(string arg, CancellationToken cancellationToken);

            /// <summary>
            /// Print 'testMultiException(%s, %s)' with arg0 as '%s' and arg1 as '%s'
            /// @param string arg - a string indication what type of exception to throw
            /// if arg0 == "Xception" throw Xception with errorCode = 1001 and message = "This is an Xception"
            /// elsen if arg0 == "Xception2" throw Xception2 with errorCode = 2002 and struct_thing.string_thing = "This is an Xception2"
            /// else do not throw anything
            /// @return Xtruct - an Xtruct with string_thing = arg1
            /// </summary>
            /// <param name="arg0"></param>
            /// <param name="arg1"></param>
            [OperationContract]
            [FaultContract(typeof(XceptionFault))]
            [FaultContract(typeof(Xception2Fault))]
            Task<Xtruct> testMultiExceptionAsync(string arg0, string arg1, CancellationToken cancellationToken);

            /// <summary>
            /// Print 'testOneway(%d): Sleeping...' with secondsToSleep as '%d'
            /// sleep 'secondsToSleep'
            /// Print 'testOneway(%d): done sleeping!' with secondsToSleep as '%d'
            /// @param i32 secondsToSleep - the number of seconds to sleep
            /// </summary>
            /// <param name="secondsToSleep"></param>
            [OperationContract]
            Task testOnewayAsync(int secondsToSleep, CancellationToken cancellationToken);

        }


        public class Client : TBaseClient, IDisposable, IAsync
        {
            public Client(TProtocol protocol) : this(protocol, protocol)
            {
            }

            public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)            {
            }
            public async Task testVoidAsync(CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testVoid", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testVoidArgs();
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testVoidResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                return;
            }

            public async Task<string> testStringAsync(string thing, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testString", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testStringArgs();
                args.Thing = thing;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testStringResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testString failed: unknown result");
            }

            public async Task<bool> testBoolAsync(bool thing, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testBool", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testBoolArgs();
                args.Thing = thing;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testBoolResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testBool failed: unknown result");
            }

            public async Task<sbyte> testByteAsync(sbyte thing, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testByte", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testByteArgs();
                args.Thing = thing;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testByteResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testByte failed: unknown result");
            }

            public async Task<int> testI32Async(int thing, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testI32", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testI32Args();
                args.Thing = thing;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testI32Result();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testI32 failed: unknown result");
            }

            public async Task<long> testI64Async(long thing, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testI64", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testI64Args();
                args.Thing = thing;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testI64Result();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testI64 failed: unknown result");
            }

            public async Task<double> testDoubleAsync(double thing, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testDouble", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testDoubleArgs();
                args.Thing = thing;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testDoubleResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testDouble failed: unknown result");
            }

            public async Task<byte[]> testBinaryAsync(byte[] thing, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testBinary", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testBinaryArgs();
                args.Thing = thing;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testBinaryResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testBinary failed: unknown result");
            }

            public async Task<Xtruct> testStructAsync(Xtruct thing, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testStruct", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testStructArgs();
                args.Thing = thing;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testStructResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testStruct failed: unknown result");
            }

            public async Task<Xtruct2> testNestAsync(Xtruct2 thing, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testNest", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testNestArgs();
                args.Thing = thing;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testNestResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testNest failed: unknown result");
            }

            public async Task<Dictionary<int, int>> testMapAsync(Dictionary<int, int> thing, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testMap", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testMapArgs();
                args.Thing = thing;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testMapResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testMap failed: unknown result");
            }

            public async Task<Dictionary<string, string>> testStringMapAsync(Dictionary<string, string> thing, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testStringMap", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testStringMapArgs();
                args.Thing = thing;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testStringMapResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testStringMap failed: unknown result");
            }

            public async Task<THashSet<int>> testSetAsync(THashSet<int> thing, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testSet", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testSetArgs();
                args.Thing = thing;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testSetResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testSet failed: unknown result");
            }

            public async Task<List<int>> testListAsync(List<int> thing, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testList", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testListArgs();
                args.Thing = thing;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testListResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testList failed: unknown result");
            }

            public async Task<Numberz> testEnumAsync(Numberz thing, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testEnum", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testEnumArgs();
                args.Thing = thing;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testEnumResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testEnum failed: unknown result");
            }

            public async Task<long> testTypedefAsync(long thing, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testTypedef", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testTypedefArgs();
                args.Thing = thing;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testTypedefResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testTypedef failed: unknown result");
            }

            public async Task<Dictionary<int, Dictionary<int, int>>> testMapMapAsync(int hello, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testMapMap", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testMapMapArgs();
                args.Hello = hello;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testMapMapResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testMapMap failed: unknown result");
            }

            public async Task<Dictionary<long, Dictionary<Numberz, Insanity>>> testInsanityAsync(Insanity argument, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testInsanity", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testInsanityArgs();
                args.Argument = argument;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testInsanityResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testInsanity failed: unknown result");
            }

            public async Task<Xtruct> testMultiAsync(sbyte arg0, int arg1, long arg2, Dictionary<short, string> arg3, Numberz arg4, long arg5, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testMulti", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testMultiArgs();
                args.Arg0 = arg0;
                args.Arg1 = arg1;
                args.Arg2 = arg2;
                args.Arg3 = arg3;
                args.Arg4 = arg4;
                args.Arg5 = arg5;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testMultiResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testMulti failed: unknown result");
            }

            public async Task testExceptionAsync(string arg, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testException", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testExceptionArgs();
                args.Arg = arg;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testExceptionResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.err1)
                {
                    throw result.Err1;
                }
                return;
            }

            public async Task<Xtruct> testMultiExceptionAsync(string arg0, string arg1, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testMultiException", TMessageType.Call, SeqId), cancellationToken);
                
                var args = new testMultiExceptionArgs();
                args.Arg0 = arg0;
                args.Arg1 = arg1;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
                
                var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
                if (msg.Type == TMessageType.Exception)
                {
                    var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
                    await InputProtocol.ReadMessageEndAsync(cancellationToken);
                    throw x;
                }

                var result = new testMultiExceptionResult();
                await result.ReadAsync(InputProtocol, cancellationToken);
                await InputProtocol.ReadMessageEndAsync(cancellationToken);
                if (result.__isset.success)
                {
                    return result.Success;
                }
                if (result.__isset.err1)
                {
                    throw result.Err1;
                }
                if (result.__isset.err2)
                {
                    throw result.Err2;
                }
                throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testMultiException failed: unknown result");
            }

            public async Task testOnewayAsync(int secondsToSleep, CancellationToken cancellationToken)
            {
                await OutputProtocol.WriteMessageBeginAsync(new TMessage("testOneway", TMessageType.Oneway, SeqId), cancellationToken);
                
                var args = new testOnewayArgs();
                args.SecondsToSleep = secondsToSleep;
                
                await args.WriteAsync(OutputProtocol, cancellationToken);
                await OutputProtocol.WriteMessageEndAsync(cancellationToken);
                await OutputProtocol.Transport.FlushAsync(cancellationToken);
            }
        }

        public class AsyncProcessor : ITAsyncProcessor
        {
            private IAsync _iAsync;

            public AsyncProcessor(IAsync iAsync)
            {
                if (iAsync == null) throw new ArgumentNullException(nameof(iAsync));

                _iAsync = iAsync;
                processMap_["testVoid"] = testVoid_ProcessAsync;
                processMap_["testString"] = testString_ProcessAsync;
                processMap_["testBool"] = testBool_ProcessAsync;
                processMap_["testByte"] = testByte_ProcessAsync;
                processMap_["testI32"] = testI32_ProcessAsync;
                processMap_["testI64"] = testI64_ProcessAsync;
                processMap_["testDouble"] = testDouble_ProcessAsync;
                processMap_["testBinary"] = testBinary_ProcessAsync;
                processMap_["testStruct"] = testStruct_ProcessAsync;
                processMap_["testNest"] = testNest_ProcessAsync;
                processMap_["testMap"] = testMap_ProcessAsync;
                processMap_["testStringMap"] = testStringMap_ProcessAsync;
                processMap_["testSet"] = testSet_ProcessAsync;
                processMap_["testList"] = testList_ProcessAsync;
                processMap_["testEnum"] = testEnum_ProcessAsync;
                processMap_["testTypedef"] = testTypedef_ProcessAsync;
                processMap_["testMapMap"] = testMapMap_ProcessAsync;
                processMap_["testInsanity"] = testInsanity_ProcessAsync;
                processMap_["testMulti"] = testMulti_ProcessAsync;
                processMap_["testException"] = testException_ProcessAsync;
                processMap_["testMultiException"] = testMultiException_ProcessAsync;
                processMap_["testOneway"] = testOneway_ProcessAsync;
            }

            protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
            protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

            public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
            {
                return await ProcessAsync(iprot, oprot, CancellationToken.None);
            }

            public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                try
                {
                    var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

                    ProcessFunction fn;
                    processMap_.TryGetValue(msg.Name, out fn);

                    if (fn == null)
                    {
                        await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
                        await iprot.ReadMessageEndAsync(cancellationToken);
                        var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                        await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
                        await x.WriteAsync(oprot, cancellationToken);
                        await oprot.WriteMessageEndAsync(cancellationToken);
                        await oprot.Transport.FlushAsync(cancellationToken);
                        return true;
                    }

                    await fn(msg.SeqID, iprot, oprot, cancellationToken);

                }
                catch (IOException)
                {
                    return false;
                }

                return true;
            }

            public async Task testVoid_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testVoidArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testVoidResult();
                try
                {
                    await _iAsync.testVoidAsync(cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testVoid", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testVoid", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testString_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testStringArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testStringResult();
                try
                {
                    result.Success = await _iAsync.testStringAsync(args.Thing, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testString", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testString", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testBool_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testBoolArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testBoolResult();
                try
                {
                    result.Success = await _iAsync.testBoolAsync(args.Thing, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testBool", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testBool", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testByte_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testByteArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testByteResult();
                try
                {
                    result.Success = await _iAsync.testByteAsync(args.Thing, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testByte", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testByte", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testI32_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testI32Args();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testI32Result();
                try
                {
                    result.Success = await _iAsync.testI32Async(args.Thing, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testI32", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testI32", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testI64_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testI64Args();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testI64Result();
                try
                {
                    result.Success = await _iAsync.testI64Async(args.Thing, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testI64", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testI64", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testDouble_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testDoubleArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testDoubleResult();
                try
                {
                    result.Success = await _iAsync.testDoubleAsync(args.Thing, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testDouble", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testDouble", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testBinary_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testBinaryArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testBinaryResult();
                try
                {
                    result.Success = await _iAsync.testBinaryAsync(args.Thing, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testBinary", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testBinary", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testStruct_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testStructArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testStructResult();
                try
                {
                    result.Success = await _iAsync.testStructAsync(args.Thing, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testStruct", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testStruct", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testNest_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testNestArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testNestResult();
                try
                {
                    result.Success = await _iAsync.testNestAsync(args.Thing, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testNest", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testNest", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testMap_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testMapArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testMapResult();
                try
                {
                    result.Success = await _iAsync.testMapAsync(args.Thing, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testMap", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testMap", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testStringMap_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testStringMapArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testStringMapResult();
                try
                {
                    result.Success = await _iAsync.testStringMapAsync(args.Thing, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testStringMap", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testStringMap", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testSet_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testSetArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testSetResult();
                try
                {
                    result.Success = await _iAsync.testSetAsync(args.Thing, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testSet", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testSet", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testListArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testListResult();
                try
                {
                    result.Success = await _iAsync.testListAsync(args.Thing, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testList", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testList", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testEnum_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testEnumArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testEnumResult();
                try
                {
                    result.Success = await _iAsync.testEnumAsync(args.Thing, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testEnum", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testEnum", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testTypedef_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testTypedefArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testTypedefResult();
                try
                {
                    result.Success = await _iAsync.testTypedefAsync(args.Thing, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testTypedef", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testTypedef", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testMapMap_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testMapMapArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testMapMapResult();
                try
                {
                    result.Success = await _iAsync.testMapMapAsync(args.Hello, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testMapMap", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testMapMap", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testInsanity_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testInsanityArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testInsanityResult();
                try
                {
                    result.Success = await _iAsync.testInsanityAsync(args.Argument, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testInsanity", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testInsanity", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testMulti_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testMultiArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testMultiResult();
                try
                {
                    result.Success = await _iAsync.testMultiAsync(args.Arg0, args.Arg1, args.Arg2, args.Arg3, args.Arg4, args.Arg5, cancellationToken);
                    await oprot.WriteMessageBeginAsync(new TMessage("testMulti", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testMulti", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testException_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testExceptionArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testExceptionResult();
                try
                {
                    try
                    {
                        await _iAsync.testExceptionAsync(args.Arg, cancellationToken);
                    }
                    catch (Xception err1)
                    {
                        result.Err1 = err1;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("testException", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testException", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testMultiException_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testMultiExceptionArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                var result = new testMultiExceptionResult();
                try
                {
                    try
                    {
                        result.Success = await _iAsync.testMultiExceptionAsync(args.Arg0, args.Arg1, cancellationToken);
                    }
                    catch (Xception err1)
                    {
                        result.Err1 = err1;
                    }
                    catch (Xception2 err2)
                    {
                        result.Err2 = err2;
                    }
                    await oprot.WriteMessageBeginAsync(new TMessage("testMultiException", TMessageType.Reply, seqid), cancellationToken); 
                    await result.WriteAsync(oprot, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                    var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
                    await oprot.WriteMessageBeginAsync(new TMessage("testMultiException", TMessageType.Exception, seqid), cancellationToken);
                    await x.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMessageEndAsync(cancellationToken);
                await oprot.Transport.FlushAsync(cancellationToken);
            }

            public async Task testOneway_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
            {
                var args = new testOnewayArgs();
                await args.ReadAsync(iprot, cancellationToken);
                await iprot.ReadMessageEndAsync(cancellationToken);
                try
                {
                    await _iAsync.testOnewayAsync(args.SecondsToSleep, cancellationToken);
                }
                catch (TTransportException)
                {
                  throw;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error occurred in processor:");
                    Console.Error.WriteLine(ex.ToString());
                }
            }

        }


        [DataContract(Namespace="")]
        public partial class testVoidArgs : TBase
        {

            public testVoidArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testVoid_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testVoid_args(");
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testVoidResult : TBase
        {

            public testVoidResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testVoid_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testVoid_result(");
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testStringArgs : TBase
        {
            private string _thing;

            [DataMember(Order = 0)]
            public string Thing
            {
                get
                {
                    return _thing;
                }
                set
                {
                    __isset.thing = true;
                    this._thing = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool thing;
            }

            #region XmlSerializer support

            public bool ShouldSerializeThing()
            {
                return __isset.thing;
            }

            #endregion XmlSerializer support

            public testStringArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Thing = await iprot.ReadStringAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testString_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (Thing != null && __isset.thing)
                    {
                        field.Name = "thing";
                        field.Type = TType.String;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteStringAsync(Thing, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testString_args(");
                bool __first = true;
                if (Thing != null && __isset.thing)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Thing: ");
                    sb.Append(Thing);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testStringResult : TBase
        {
            private string _success;

            [DataMember(Order = 0)]
            public string Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            #endregion XmlSerializer support

            public testStringResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.String)
                                {
                                    Success = await iprot.ReadStringAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testString_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.String;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await oprot.WriteStringAsync(Success, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testString_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testBoolArgs : TBase
        {
            private bool _thing;

            [DataMember(Order = 0)]
            public bool Thing
            {
                get
                {
                    return _thing;
                }
                set
                {
                    __isset.thing = true;
                    this._thing = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool thing;
            }

            #region XmlSerializer support

            public bool ShouldSerializeThing()
            {
                return __isset.thing;
            }

            #endregion XmlSerializer support

            public testBoolArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Bool)
                                {
                                    Thing = await iprot.ReadBoolAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testBool_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (__isset.thing)
                    {
                        field.Name = "thing";
                        field.Type = TType.Bool;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteBoolAsync(Thing, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testBool_args(");
                bool __first = true;
                if (__isset.thing)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Thing: ");
                    sb.Append(Thing);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testBoolResult : TBase
        {
            private bool _success;

            [DataMember(Order = 0)]
            public bool Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            #endregion XmlSerializer support

            public testBoolResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Bool)
                                {
                                    Success = await iprot.ReadBoolAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testBool_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        field.Name = "Success";
                        field.Type = TType.Bool;
                        field.ID = 0;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteBoolAsync(Success, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testBool_result(");
                bool __first = true;
                if (__isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testByteArgs : TBase
        {
            private sbyte _thing;

            [DataMember(Order = 0)]
            public sbyte Thing
            {
                get
                {
                    return _thing;
                }
                set
                {
                    __isset.thing = true;
                    this._thing = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool thing;
            }

            #region XmlSerializer support

            public bool ShouldSerializeThing()
            {
                return __isset.thing;
            }

            #endregion XmlSerializer support

            public testByteArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Byte)
                                {
                                    Thing = await iprot.ReadByteAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testByte_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (__isset.thing)
                    {
                        field.Name = "thing";
                        field.Type = TType.Byte;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteByteAsync(Thing, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testByte_args(");
                bool __first = true;
                if (__isset.thing)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Thing: ");
                    sb.Append(Thing);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testByteResult : TBase
        {
            private sbyte _success;

            [DataMember(Order = 0)]
            public sbyte Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            #endregion XmlSerializer support

            public testByteResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Byte)
                                {
                                    Success = await iprot.ReadByteAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testByte_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        field.Name = "Success";
                        field.Type = TType.Byte;
                        field.ID = 0;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteByteAsync(Success, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testByte_result(");
                bool __first = true;
                if (__isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testI32Args : TBase
        {
            private int _thing;

            [DataMember(Order = 0)]
            public int Thing
            {
                get
                {
                    return _thing;
                }
                set
                {
                    __isset.thing = true;
                    this._thing = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool thing;
            }

            #region XmlSerializer support

            public bool ShouldSerializeThing()
            {
                return __isset.thing;
            }

            #endregion XmlSerializer support

            public testI32Args()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.I32)
                                {
                                    Thing = await iprot.ReadI32Async(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testI32_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (__isset.thing)
                    {
                        field.Name = "thing";
                        field.Type = TType.I32;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteI32Async(Thing, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testI32_args(");
                bool __first = true;
                if (__isset.thing)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Thing: ");
                    sb.Append(Thing);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testI32Result : TBase
        {
            private int _success;

            [DataMember(Order = 0)]
            public int Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            #endregion XmlSerializer support

            public testI32Result()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.I32)
                                {
                                    Success = await iprot.ReadI32Async(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testI32_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        field.Name = "Success";
                        field.Type = TType.I32;
                        field.ID = 0;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteI32Async(Success, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testI32_result(");
                bool __first = true;
                if (__isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testI64Args : TBase
        {
            private long _thing;

            [DataMember(Order = 0)]
            public long Thing
            {
                get
                {
                    return _thing;
                }
                set
                {
                    __isset.thing = true;
                    this._thing = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool thing;
            }

            #region XmlSerializer support

            public bool ShouldSerializeThing()
            {
                return __isset.thing;
            }

            #endregion XmlSerializer support

            public testI64Args()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.I64)
                                {
                                    Thing = await iprot.ReadI64Async(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testI64_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (__isset.thing)
                    {
                        field.Name = "thing";
                        field.Type = TType.I64;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteI64Async(Thing, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testI64_args(");
                bool __first = true;
                if (__isset.thing)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Thing: ");
                    sb.Append(Thing);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testI64Result : TBase
        {
            private long _success;

            [DataMember(Order = 0)]
            public long Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            #endregion XmlSerializer support

            public testI64Result()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.I64)
                                {
                                    Success = await iprot.ReadI64Async(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testI64_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        field.Name = "Success";
                        field.Type = TType.I64;
                        field.ID = 0;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteI64Async(Success, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testI64_result(");
                bool __first = true;
                if (__isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testDoubleArgs : TBase
        {
            private double _thing;

            [DataMember(Order = 0)]
            public double Thing
            {
                get
                {
                    return _thing;
                }
                set
                {
                    __isset.thing = true;
                    this._thing = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool thing;
            }

            #region XmlSerializer support

            public bool ShouldSerializeThing()
            {
                return __isset.thing;
            }

            #endregion XmlSerializer support

            public testDoubleArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Double)
                                {
                                    Thing = await iprot.ReadDoubleAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testDouble_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (__isset.thing)
                    {
                        field.Name = "thing";
                        field.Type = TType.Double;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteDoubleAsync(Thing, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testDouble_args(");
                bool __first = true;
                if (__isset.thing)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Thing: ");
                    sb.Append(Thing);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testDoubleResult : TBase
        {
            private double _success;

            [DataMember(Order = 0)]
            public double Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            #endregion XmlSerializer support

            public testDoubleResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Double)
                                {
                                    Success = await iprot.ReadDoubleAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testDouble_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        field.Name = "Success";
                        field.Type = TType.Double;
                        field.ID = 0;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteDoubleAsync(Success, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testDouble_result(");
                bool __first = true;
                if (__isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testBinaryArgs : TBase
        {
            private byte[] _thing;

            [DataMember(Order = 0)]
            public byte[] Thing
            {
                get
                {
                    return _thing;
                }
                set
                {
                    __isset.thing = true;
                    this._thing = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool thing;
            }

            #region XmlSerializer support

            public bool ShouldSerializeThing()
            {
                return __isset.thing;
            }

            #endregion XmlSerializer support

            public testBinaryArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Thing = await iprot.ReadBinaryAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testBinary_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (Thing != null && __isset.thing)
                    {
                        field.Name = "thing";
                        field.Type = TType.String;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteBinaryAsync(Thing, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testBinary_args(");
                bool __first = true;
                if (Thing != null && __isset.thing)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Thing: ");
                    sb.Append(Thing);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testBinaryResult : TBase
        {
            private byte[] _success;

            [DataMember(Order = 0)]
            public byte[] Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            #endregion XmlSerializer support

            public testBinaryResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.String)
                                {
                                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testBinary_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.String;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await oprot.WriteBinaryAsync(Success, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testBinary_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testStructArgs : TBase
        {
            private Xtruct _thing;

            [DataMember(Order = 0)]
            public Xtruct Thing
            {
                get
                {
                    return _thing;
                }
                set
                {
                    __isset.thing = true;
                    this._thing = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool thing;
            }

            #region XmlSerializer support

            public bool ShouldSerializeThing()
            {
                return __isset.thing;
            }

            #endregion XmlSerializer support

            public testStructArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Thing = new Xtruct();
                                    await Thing.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testStruct_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (Thing != null && __isset.thing)
                    {
                        field.Name = "thing";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await Thing.WriteAsync(oprot, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testStruct_args(");
                bool __first = true;
                if (Thing != null && __isset.thing)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Thing: ");
                    sb.Append(Thing== null ? "<null>" : Thing.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testStructResult : TBase
        {
            private Xtruct _success;

            [DataMember(Order = 0)]
            public Xtruct Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            #endregion XmlSerializer support

            public testStructResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Struct)
                                {
                                    Success = new Xtruct();
                                    await Success.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testStruct_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.Struct;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Success.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testStruct_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success== null ? "<null>" : Success.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testNestArgs : TBase
        {
            private Xtruct2 _thing;

            [DataMember(Order = 0)]
            public Xtruct2 Thing
            {
                get
                {
                    return _thing;
                }
                set
                {
                    __isset.thing = true;
                    this._thing = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool thing;
            }

            #region XmlSerializer support

            public bool ShouldSerializeThing()
            {
                return __isset.thing;
            }

            #endregion XmlSerializer support

            public testNestArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Thing = new Xtruct2();
                                    await Thing.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testNest_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (Thing != null && __isset.thing)
                    {
                        field.Name = "thing";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await Thing.WriteAsync(oprot, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testNest_args(");
                bool __first = true;
                if (Thing != null && __isset.thing)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Thing: ");
                    sb.Append(Thing== null ? "<null>" : Thing.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testNestResult : TBase
        {
            private Xtruct2 _success;

            [DataMember(Order = 0)]
            public Xtruct2 Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            #endregion XmlSerializer support

            public testNestResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Struct)
                                {
                                    Success = new Xtruct2();
                                    await Success.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testNest_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.Struct;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Success.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testNest_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success== null ? "<null>" : Success.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testMapArgs : TBase
        {
            private Dictionary<int, int> _thing;

            [DataMember(Order = 0)]
            public Dictionary<int, int> Thing
            {
                get
                {
                    return _thing;
                }
                set
                {
                    __isset.thing = true;
                    this._thing = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool thing;
            }

            #region XmlSerializer support

            public bool ShouldSerializeThing()
            {
                return __isset.thing;
            }

            #endregion XmlSerializer support

            public testMapArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Map)
                                {
                                    {
                                        Thing = new Dictionary<int, int>();
                                        TMap _map144 = await iprot.ReadMapBeginAsync(cancellationToken);
                                        for(int _i145 = 0; _i145 < _map144.Count; ++_i145)
                                        {
                                            int _key146;
                                            int _val147;
                                            _key146 = await iprot.ReadI32Async(cancellationToken);
                                            _val147 = await iprot.ReadI32Async(cancellationToken);
                                            Thing[_key146] = _val147;
                                        }
                                        await iprot.ReadMapEndAsync(cancellationToken);
                                    }
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testMap_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (Thing != null && __isset.thing)
                    {
                        field.Name = "thing";
                        field.Type = TType.Map;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        {
                            await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.I32, Thing.Count), cancellationToken);
                            foreach (int _iter148 in Thing.Keys)
                            {
                                await oprot.WriteI32Async(_iter148, cancellationToken);
                                await oprot.WriteI32Async(Thing[_iter148], cancellationToken);
                            }
                            await oprot.WriteMapEndAsync(cancellationToken);
                        }
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testMap_args(");
                bool __first = true;
                if (Thing != null && __isset.thing)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Thing: ");
                    sb.Append(Thing);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testMapResult : TBase
        {
            private Dictionary<int, int> _success;

            [DataMember(Order = 0)]
            public Dictionary<int, int> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            #endregion XmlSerializer support

            public testMapResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Map)
                                {
                                    {
                                        Success = new Dictionary<int, int>();
                                        TMap _map149 = await iprot.ReadMapBeginAsync(cancellationToken);
                                        for(int _i150 = 0; _i150 < _map149.Count; ++_i150)
                                        {
                                            int _key151;
                                            int _val152;
                                            _key151 = await iprot.ReadI32Async(cancellationToken);
                                            _val152 = await iprot.ReadI32Async(cancellationToken);
                                            Success[_key151] = _val152;
                                        }
                                        await iprot.ReadMapEndAsync(cancellationToken);
                                    }
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testMap_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.Map;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            {
                                await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.I32, Success.Count), cancellationToken);
                                foreach (int _iter153 in Success.Keys)
                                {
                                    await oprot.WriteI32Async(_iter153, cancellationToken);
                                    await oprot.WriteI32Async(Success[_iter153], cancellationToken);
                                }
                                await oprot.WriteMapEndAsync(cancellationToken);
                            }
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testMap_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testStringMapArgs : TBase
        {
            private Dictionary<string, string> _thing;

            [DataMember(Order = 0)]
            public Dictionary<string, string> Thing
            {
                get
                {
                    return _thing;
                }
                set
                {
                    __isset.thing = true;
                    this._thing = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool thing;
            }

            #region XmlSerializer support

            public bool ShouldSerializeThing()
            {
                return __isset.thing;
            }

            #endregion XmlSerializer support

            public testStringMapArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Map)
                                {
                                    {
                                        Thing = new Dictionary<string, string>();
                                        TMap _map154 = await iprot.ReadMapBeginAsync(cancellationToken);
                                        for(int _i155 = 0; _i155 < _map154.Count; ++_i155)
                                        {
                                            string _key156;
                                            string _val157;
                                            _key156 = await iprot.ReadStringAsync(cancellationToken);
                                            _val157 = await iprot.ReadStringAsync(cancellationToken);
                                            Thing[_key156] = _val157;
                                        }
                                        await iprot.ReadMapEndAsync(cancellationToken);
                                    }
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testStringMap_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (Thing != null && __isset.thing)
                    {
                        field.Name = "thing";
                        field.Type = TType.Map;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        {
                            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Thing.Count), cancellationToken);
                            foreach (string _iter158 in Thing.Keys)
                            {
                                await oprot.WriteStringAsync(_iter158, cancellationToken);
                                await oprot.WriteStringAsync(Thing[_iter158], cancellationToken);
                            }
                            await oprot.WriteMapEndAsync(cancellationToken);
                        }
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testStringMap_args(");
                bool __first = true;
                if (Thing != null && __isset.thing)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Thing: ");
                    sb.Append(Thing);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testStringMapResult : TBase
        {
            private Dictionary<string, string> _success;

            [DataMember(Order = 0)]
            public Dictionary<string, string> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            #endregion XmlSerializer support

            public testStringMapResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Map)
                                {
                                    {
                                        Success = new Dictionary<string, string>();
                                        TMap _map159 = await iprot.ReadMapBeginAsync(cancellationToken);
                                        for(int _i160 = 0; _i160 < _map159.Count; ++_i160)
                                        {
                                            string _key161;
                                            string _val162;
                                            _key161 = await iprot.ReadStringAsync(cancellationToken);
                                            _val162 = await iprot.ReadStringAsync(cancellationToken);
                                            Success[_key161] = _val162;
                                        }
                                        await iprot.ReadMapEndAsync(cancellationToken);
                                    }
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testStringMap_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.Map;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            {
                                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Success.Count), cancellationToken);
                                foreach (string _iter163 in Success.Keys)
                                {
                                    await oprot.WriteStringAsync(_iter163, cancellationToken);
                                    await oprot.WriteStringAsync(Success[_iter163], cancellationToken);
                                }
                                await oprot.WriteMapEndAsync(cancellationToken);
                            }
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testStringMap_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testSetArgs : TBase
        {
            private THashSet<int> _thing;

            [DataMember(Order = 0)]
            public THashSet<int> Thing
            {
                get
                {
                    return _thing;
                }
                set
                {
                    __isset.thing = true;
                    this._thing = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool thing;
            }

            #region XmlSerializer support

            public bool ShouldSerializeThing()
            {
                return __isset.thing;
            }

            #endregion XmlSerializer support

            public testSetArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Set)
                                {
                                    {
                                        Thing = new THashSet<int>();
                                        TSet _set164 = await iprot.ReadSetBeginAsync(cancellationToken);
                                        for(int _i165 = 0; _i165 < _set164.Count; ++_i165)
                                        {
                                            int _elem166;
                                            _elem166 = await iprot.ReadI32Async(cancellationToken);
                                            Thing.Add(_elem166);
                                        }
                                        await iprot.ReadSetEndAsync(cancellationToken);
                                    }
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testSet_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (Thing != null && __isset.thing)
                    {
                        field.Name = "thing";
                        field.Type = TType.Set;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        {
                            await oprot.WriteSetBeginAsync(new TSet(TType.I32, Thing.Count), cancellationToken);
                            foreach (int _iter167 in Thing)
                            {
                                await oprot.WriteI32Async(_iter167, cancellationToken);
                            }
                            await oprot.WriteSetEndAsync(cancellationToken);
                        }
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testSet_args(");
                bool __first = true;
                if (Thing != null && __isset.thing)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Thing: ");
                    sb.Append(Thing);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testSetResult : TBase
        {
            private THashSet<int> _success;

            [DataMember(Order = 0)]
            public THashSet<int> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            #endregion XmlSerializer support

            public testSetResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Set)
                                {
                                    {
                                        Success = new THashSet<int>();
                                        TSet _set168 = await iprot.ReadSetBeginAsync(cancellationToken);
                                        for(int _i169 = 0; _i169 < _set168.Count; ++_i169)
                                        {
                                            int _elem170;
                                            _elem170 = await iprot.ReadI32Async(cancellationToken);
                                            Success.Add(_elem170);
                                        }
                                        await iprot.ReadSetEndAsync(cancellationToken);
                                    }
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testSet_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.Set;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            {
                                await oprot.WriteSetBeginAsync(new TSet(TType.I32, Success.Count), cancellationToken);
                                foreach (int _iter171 in Success)
                                {
                                    await oprot.WriteI32Async(_iter171, cancellationToken);
                                }
                                await oprot.WriteSetEndAsync(cancellationToken);
                            }
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testSet_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testListArgs : TBase
        {
            private List<int> _thing;

            [DataMember(Order = 0)]
            public List<int> Thing
            {
                get
                {
                    return _thing;
                }
                set
                {
                    __isset.thing = true;
                    this._thing = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool thing;
            }

            #region XmlSerializer support

            public bool ShouldSerializeThing()
            {
                return __isset.thing;
            }

            #endregion XmlSerializer support

            public testListArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.List)
                                {
                                    {
                                        Thing = new List<int>();
                                        TList _list172 = await iprot.ReadListBeginAsync(cancellationToken);
                                        for(int _i173 = 0; _i173 < _list172.Count; ++_i173)
                                        {
                                            int _elem174;
                                            _elem174 = await iprot.ReadI32Async(cancellationToken);
                                            Thing.Add(_elem174);
                                        }
                                        await iprot.ReadListEndAsync(cancellationToken);
                                    }
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testList_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (Thing != null && __isset.thing)
                    {
                        field.Name = "thing";
                        field.Type = TType.List;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        {
                            await oprot.WriteListBeginAsync(new TList(TType.I32, Thing.Count), cancellationToken);
                            foreach (int _iter175 in Thing)
                            {
                                await oprot.WriteI32Async(_iter175, cancellationToken);
                            }
                            await oprot.WriteListEndAsync(cancellationToken);
                        }
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testList_args(");
                bool __first = true;
                if (Thing != null && __isset.thing)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Thing: ");
                    sb.Append(Thing);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testListResult : TBase
        {
            private List<int> _success;

            [DataMember(Order = 0)]
            public List<int> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            #endregion XmlSerializer support

            public testListResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.List)
                                {
                                    {
                                        Success = new List<int>();
                                        TList _list176 = await iprot.ReadListBeginAsync(cancellationToken);
                                        for(int _i177 = 0; _i177 < _list176.Count; ++_i177)
                                        {
                                            int _elem178;
                                            _elem178 = await iprot.ReadI32Async(cancellationToken);
                                            Success.Add(_elem178);
                                        }
                                        await iprot.ReadListEndAsync(cancellationToken);
                                    }
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testList_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.List;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            {
                                await oprot.WriteListBeginAsync(new TList(TType.I32, Success.Count), cancellationToken);
                                foreach (int _iter179 in Success)
                                {
                                    await oprot.WriteI32Async(_iter179, cancellationToken);
                                }
                                await oprot.WriteListEndAsync(cancellationToken);
                            }
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testList_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testEnumArgs : TBase
        {
            private Numberz _thing;

            /// <summary>
            /// 
            /// <seealso cref="Numberz"/>
            /// </summary>
            [DataMember(Order = 0)]
            public Numberz Thing
            {
                get
                {
                    return _thing;
                }
                set
                {
                    __isset.thing = true;
                    this._thing = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool thing;
            }

            #region XmlSerializer support

            public bool ShouldSerializeThing()
            {
                return __isset.thing;
            }

            #endregion XmlSerializer support

            public testEnumArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.I32)
                                {
                                    Thing = (Numberz)await iprot.ReadI32Async(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testEnum_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (__isset.thing)
                    {
                        field.Name = "thing";
                        field.Type = TType.I32;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteI32Async((int)Thing, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testEnum_args(");
                bool __first = true;
                if (__isset.thing)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Thing: ");
                    sb.Append(Thing);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testEnumResult : TBase
        {
            private Numberz _success;

            /// <summary>
            /// 
            /// <seealso cref="Numberz"/>
            /// </summary>
            [DataMember(Order = 0)]
            public Numberz Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            #endregion XmlSerializer support

            public testEnumResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.I32)
                                {
                                    Success = (Numberz)await iprot.ReadI32Async(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testEnum_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        field.Name = "Success";
                        field.Type = TType.I32;
                        field.ID = 0;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteI32Async((int)Success, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testEnum_result(");
                bool __first = true;
                if (__isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testTypedefArgs : TBase
        {
            private long _thing;

            [DataMember(Order = 0)]
            public long Thing
            {
                get
                {
                    return _thing;
                }
                set
                {
                    __isset.thing = true;
                    this._thing = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool thing;
            }

            #region XmlSerializer support

            public bool ShouldSerializeThing()
            {
                return __isset.thing;
            }

            #endregion XmlSerializer support

            public testTypedefArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.I64)
                                {
                                    Thing = await iprot.ReadI64Async(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testTypedef_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (__isset.thing)
                    {
                        field.Name = "thing";
                        field.Type = TType.I64;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteI64Async(Thing, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testTypedef_args(");
                bool __first = true;
                if (__isset.thing)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Thing: ");
                    sb.Append(Thing);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testTypedefResult : TBase
        {
            private long _success;

            [DataMember(Order = 0)]
            public long Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            #endregion XmlSerializer support

            public testTypedefResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.I64)
                                {
                                    Success = await iprot.ReadI64Async(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testTypedef_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        field.Name = "Success";
                        field.Type = TType.I64;
                        field.ID = 0;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteI64Async(Success, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testTypedef_result(");
                bool __first = true;
                if (__isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testMapMapArgs : TBase
        {
            private int _hello;

            [DataMember(Order = 0)]
            public int Hello
            {
                get
                {
                    return _hello;
                }
                set
                {
                    __isset.hello = true;
                    this._hello = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool hello;
            }

            #region XmlSerializer support

            public bool ShouldSerializeHello()
            {
                return __isset.hello;
            }

            #endregion XmlSerializer support

            public testMapMapArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.I32)
                                {
                                    Hello = await iprot.ReadI32Async(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testMapMap_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (__isset.hello)
                    {
                        field.Name = "hello";
                        field.Type = TType.I32;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteI32Async(Hello, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testMapMap_args(");
                bool __first = true;
                if (__isset.hello)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Hello: ");
                    sb.Append(Hello);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testMapMapResult : TBase
        {
            private Dictionary<int, Dictionary<int, int>> _success;

            [DataMember(Order = 0)]
            public Dictionary<int, Dictionary<int, int>> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            #endregion XmlSerializer support

            public testMapMapResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Map)
                                {
                                    {
                                        Success = new Dictionary<int, Dictionary<int, int>>();
                                        TMap _map180 = await iprot.ReadMapBeginAsync(cancellationToken);
                                        for(int _i181 = 0; _i181 < _map180.Count; ++_i181)
                                        {
                                            int _key182;
                                            Dictionary<int, int> _val183;
                                            _key182 = await iprot.ReadI32Async(cancellationToken);
                                            {
                                                _val183 = new Dictionary<int, int>();
                                                TMap _map184 = await iprot.ReadMapBeginAsync(cancellationToken);
                                                for(int _i185 = 0; _i185 < _map184.Count; ++_i185)
                                                {
                                                    int _key186;
                                                    int _val187;
                                                    _key186 = await iprot.ReadI32Async(cancellationToken);
                                                    _val187 = await iprot.ReadI32Async(cancellationToken);
                                                    _val183[_key186] = _val187;
                                                }
                                                await iprot.ReadMapEndAsync(cancellationToken);
                                            }
                                            Success[_key182] = _val183;
                                        }
                                        await iprot.ReadMapEndAsync(cancellationToken);
                                    }
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testMapMap_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.Map;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            {
                                await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.Map, Success.Count), cancellationToken);
                                foreach (int _iter188 in Success.Keys)
                                {
                                    await oprot.WriteI32Async(_iter188, cancellationToken);
                                    {
                                        await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.I32, Success[_iter188].Count), cancellationToken);
                                        foreach (int _iter189 in Success[_iter188].Keys)
                                        {
                                            await oprot.WriteI32Async(_iter189, cancellationToken);
                                            await oprot.WriteI32Async(Success[_iter188][_iter189], cancellationToken);
                                        }
                                        await oprot.WriteMapEndAsync(cancellationToken);
                                    }
                                }
                                await oprot.WriteMapEndAsync(cancellationToken);
                            }
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testMapMap_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testInsanityArgs : TBase
        {
            private Insanity _argument;

            [DataMember(Order = 0)]
            public Insanity Argument
            {
                get
                {
                    return _argument;
                }
                set
                {
                    __isset.argument = true;
                    this._argument = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool argument;
            }

            #region XmlSerializer support

            public bool ShouldSerializeArgument()
            {
                return __isset.argument;
            }

            #endregion XmlSerializer support

            public testInsanityArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Argument = new Insanity();
                                    await Argument.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testInsanity_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (Argument != null && __isset.argument)
                    {
                        field.Name = "argument";
                        field.Type = TType.Struct;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await Argument.WriteAsync(oprot, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testInsanity_args(");
                bool __first = true;
                if (Argument != null && __isset.argument)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Argument: ");
                    sb.Append(Argument== null ? "<null>" : Argument.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testInsanityResult : TBase
        {
            private Dictionary<long, Dictionary<Numberz, Insanity>> _success;

            [DataMember(Order = 0)]
            public Dictionary<long, Dictionary<Numberz, Insanity>> Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            #endregion XmlSerializer support

            public testInsanityResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Map)
                                {
                                    {
                                        Success = new Dictionary<long, Dictionary<Numberz, Insanity>>();
                                        TMap _map190 = await iprot.ReadMapBeginAsync(cancellationToken);
                                        for(int _i191 = 0; _i191 < _map190.Count; ++_i191)
                                        {
                                            long _key192;
                                            Dictionary<Numberz, Insanity> _val193;
                                            _key192 = await iprot.ReadI64Async(cancellationToken);
                                            {
                                                _val193 = new Dictionary<Numberz, Insanity>();
                                                TMap _map194 = await iprot.ReadMapBeginAsync(cancellationToken);
                                                for(int _i195 = 0; _i195 < _map194.Count; ++_i195)
                                                {
                                                    Numberz _key196;
                                                    Insanity _val197;
                                                    _key196 = (Numberz)await iprot.ReadI32Async(cancellationToken);
                                                    _val197 = new Insanity();
                                                    await _val197.ReadAsync(iprot, cancellationToken);
                                                    _val193[_key196] = _val197;
                                                }
                                                await iprot.ReadMapEndAsync(cancellationToken);
                                            }
                                            Success[_key192] = _val193;
                                        }
                                        await iprot.ReadMapEndAsync(cancellationToken);
                                    }
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testInsanity_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.Map;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            {
                                await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.Map, Success.Count), cancellationToken);
                                foreach (long _iter198 in Success.Keys)
                                {
                                    await oprot.WriteI64Async(_iter198, cancellationToken);
                                    {
                                        await oprot.WriteMapBeginAsync(new TMap(TType.I32, TType.Struct, Success[_iter198].Count), cancellationToken);
                                        foreach (Numberz _iter199 in Success[_iter198].Keys)
                                        {
                                            await oprot.WriteI32Async((int)_iter199, cancellationToken);
                                            await Success[_iter198][_iter199].WriteAsync(oprot, cancellationToken);
                                        }
                                        await oprot.WriteMapEndAsync(cancellationToken);
                                    }
                                }
                                await oprot.WriteMapEndAsync(cancellationToken);
                            }
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testInsanity_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testMultiArgs : TBase
        {
            private sbyte _arg0;
            private int _arg1;
            private long _arg2;
            private Dictionary<short, string> _arg3;
            private Numberz _arg4;
            private long _arg5;

            [DataMember(Order = 0)]
            public sbyte Arg0
            {
                get
                {
                    return _arg0;
                }
                set
                {
                    __isset.arg0 = true;
                    this._arg0 = value;
                }
            }

            [DataMember(Order = 0)]
            public int Arg1
            {
                get
                {
                    return _arg1;
                }
                set
                {
                    __isset.arg1 = true;
                    this._arg1 = value;
                }
            }

            [DataMember(Order = 0)]
            public long Arg2
            {
                get
                {
                    return _arg2;
                }
                set
                {
                    __isset.arg2 = true;
                    this._arg2 = value;
                }
            }

            [DataMember(Order = 0)]
            public Dictionary<short, string> Arg3
            {
                get
                {
                    return _arg3;
                }
                set
                {
                    __isset.arg3 = true;
                    this._arg3 = value;
                }
            }

            /// <summary>
            /// 
            /// <seealso cref="Numberz"/>
            /// </summary>
            [DataMember(Order = 0)]
            public Numberz Arg4
            {
                get
                {
                    return _arg4;
                }
                set
                {
                    __isset.arg4 = true;
                    this._arg4 = value;
                }
            }

            [DataMember(Order = 0)]
            public long Arg5
            {
                get
                {
                    return _arg5;
                }
                set
                {
                    __isset.arg5 = true;
                    this._arg5 = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool arg0;
                [DataMember]
                public bool arg1;
                [DataMember]
                public bool arg2;
                [DataMember]
                public bool arg3;
                [DataMember]
                public bool arg4;
                [DataMember]
                public bool arg5;
            }

            #region XmlSerializer support

            public bool ShouldSerializeArg0()
            {
                return __isset.arg0;
            }

            public bool ShouldSerializeArg1()
            {
                return __isset.arg1;
            }

            public bool ShouldSerializeArg2()
            {
                return __isset.arg2;
            }

            public bool ShouldSerializeArg3()
            {
                return __isset.arg3;
            }

            public bool ShouldSerializeArg4()
            {
                return __isset.arg4;
            }

            public bool ShouldSerializeArg5()
            {
                return __isset.arg5;
            }

            #endregion XmlSerializer support

            public testMultiArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Byte)
                                {
                                    Arg0 = await iprot.ReadByteAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.I32)
                                {
                                    Arg1 = await iprot.ReadI32Async(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 3:
                                if (field.Type == TType.I64)
                                {
                                    Arg2 = await iprot.ReadI64Async(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 4:
                                if (field.Type == TType.Map)
                                {
                                    {
                                        Arg3 = new Dictionary<short, string>();
                                        TMap _map200 = await iprot.ReadMapBeginAsync(cancellationToken);
                                        for(int _i201 = 0; _i201 < _map200.Count; ++_i201)
                                        {
                                            short _key202;
                                            string _val203;
                                            _key202 = await iprot.ReadI16Async(cancellationToken);
                                            _val203 = await iprot.ReadStringAsync(cancellationToken);
                                            Arg3[_key202] = _val203;
                                        }
                                        await iprot.ReadMapEndAsync(cancellationToken);
                                    }
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 5:
                                if (field.Type == TType.I32)
                                {
                                    Arg4 = (Numberz)await iprot.ReadI32Async(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 6:
                                if (field.Type == TType.I64)
                                {
                                    Arg5 = await iprot.ReadI64Async(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testMulti_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (__isset.arg0)
                    {
                        field.Name = "arg0";
                        field.Type = TType.Byte;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteByteAsync(Arg0, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (__isset.arg1)
                    {
                        field.Name = "arg1";
                        field.Type = TType.I32;
                        field.ID = 2;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteI32Async(Arg1, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (__isset.arg2)
                    {
                        field.Name = "arg2";
                        field.Type = TType.I64;
                        field.ID = 3;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteI64Async(Arg2, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (Arg3 != null && __isset.arg3)
                    {
                        field.Name = "arg3";
                        field.Type = TType.Map;
                        field.ID = 4;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        {
                            await oprot.WriteMapBeginAsync(new TMap(TType.I16, TType.String, Arg3.Count), cancellationToken);
                            foreach (short _iter204 in Arg3.Keys)
                            {
                                await oprot.WriteI16Async(_iter204, cancellationToken);
                                await oprot.WriteStringAsync(Arg3[_iter204], cancellationToken);
                            }
                            await oprot.WriteMapEndAsync(cancellationToken);
                        }
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (__isset.arg4)
                    {
                        field.Name = "arg4";
                        field.Type = TType.I32;
                        field.ID = 5;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteI32Async((int)Arg4, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (__isset.arg5)
                    {
                        field.Name = "arg5";
                        field.Type = TType.I64;
                        field.ID = 6;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteI64Async(Arg5, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testMulti_args(");
                bool __first = true;
                if (__isset.arg0)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Arg0: ");
                    sb.Append(Arg0);
                }
                if (__isset.arg1)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Arg1: ");
                    sb.Append(Arg1);
                }
                if (__isset.arg2)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Arg2: ");
                    sb.Append(Arg2);
                }
                if (Arg3 != null && __isset.arg3)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Arg3: ");
                    sb.Append(Arg3);
                }
                if (__isset.arg4)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Arg4: ");
                    sb.Append(Arg4);
                }
                if (__isset.arg5)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Arg5: ");
                    sb.Append(Arg5);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testMultiResult : TBase
        {
            private Xtruct _success;

            [DataMember(Order = 0)]
            public Xtruct Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            #endregion XmlSerializer support

            public testMultiResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Struct)
                                {
                                    Success = new Xtruct();
                                    await Success.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testMulti_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.Struct;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Success.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testMulti_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success== null ? "<null>" : Success.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testExceptionArgs : TBase
        {
            private string _arg;

            [DataMember(Order = 0)]
            public string Arg
            {
                get
                {
                    return _arg;
                }
                set
                {
                    __isset.arg = true;
                    this._arg = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool arg;
            }

            #region XmlSerializer support

            public bool ShouldSerializeArg()
            {
                return __isset.arg;
            }

            #endregion XmlSerializer support

            public testExceptionArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Arg = await iprot.ReadStringAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testException_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (Arg != null && __isset.arg)
                    {
                        field.Name = "arg";
                        field.Type = TType.String;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteStringAsync(Arg, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testException_args(");
                bool __first = true;
                if (Arg != null && __isset.arg)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Arg: ");
                    sb.Append(Arg);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testExceptionResult : TBase
        {
            private Xception _err1;

            [DataMember(Order = 0)]
            public Xception Err1
            {
                get
                {
                    return _err1;
                }
                set
                {
                    __isset.err1 = true;
                    this._err1 = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool err1;
            }

            #region XmlSerializer support

            public bool ShouldSerializeErr1()
            {
                return __isset.err1;
            }

            #endregion XmlSerializer support

            public testExceptionResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Err1 = new Xception();
                                    await Err1.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testException_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.err1)
                    {
                        if (Err1 != null)
                        {
                            field.Name = "Err1";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Err1.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testException_result(");
                bool __first = true;
                if (Err1 != null && __isset.err1)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Err1: ");
                    sb.Append(Err1== null ? "<null>" : Err1.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testMultiExceptionArgs : TBase
        {
            private string _arg0;
            private string _arg1;

            [DataMember(Order = 0)]
            public string Arg0
            {
                get
                {
                    return _arg0;
                }
                set
                {
                    __isset.arg0 = true;
                    this._arg0 = value;
                }
            }

            [DataMember(Order = 0)]
            public string Arg1
            {
                get
                {
                    return _arg1;
                }
                set
                {
                    __isset.arg1 = true;
                    this._arg1 = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool arg0;
                [DataMember]
                public bool arg1;
            }

            #region XmlSerializer support

            public bool ShouldSerializeArg0()
            {
                return __isset.arg0;
            }

            public bool ShouldSerializeArg1()
            {
                return __isset.arg1;
            }

            #endregion XmlSerializer support

            public testMultiExceptionArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    Arg0 = await iprot.ReadStringAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.String)
                                {
                                    Arg1 = await iprot.ReadStringAsync(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testMultiException_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (Arg0 != null && __isset.arg0)
                    {
                        field.Name = "arg0";
                        field.Type = TType.String;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteStringAsync(Arg0, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    if (Arg1 != null && __isset.arg1)
                    {
                        field.Name = "arg1";
                        field.Type = TType.String;
                        field.ID = 2;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteStringAsync(Arg1, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testMultiException_args(");
                bool __first = true;
                if (Arg0 != null && __isset.arg0)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Arg0: ");
                    sb.Append(Arg0);
                }
                if (Arg1 != null && __isset.arg1)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Arg1: ");
                    sb.Append(Arg1);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testMultiExceptionResult : TBase
        {
            private Xtruct _success;
            private Xception _err1;
            private Xception2 _err2;

            [DataMember(Order = 0)]
            public Xtruct Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            [DataMember(Order = 0)]
            public Xception Err1
            {
                get
                {
                    return _err1;
                }
                set
                {
                    __isset.err1 = true;
                    this._err1 = value;
                }
            }

            [DataMember(Order = 0)]
            public Xception2 Err2
            {
                get
                {
                    return _err2;
                }
                set
                {
                    __isset.err2 = true;
                    this._err2 = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool success;
                [DataMember]
                public bool err1;
                [DataMember]
                public bool err2;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSuccess()
            {
                return __isset.success;
            }

            public bool ShouldSerializeErr1()
            {
                return __isset.err1;
            }

            public bool ShouldSerializeErr2()
            {
                return __isset.err2;
            }

            #endregion XmlSerializer support

            public testMultiExceptionResult()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.Struct)
                                {
                                    Success = new Xtruct();
                                    await Success.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 1:
                                if (field.Type == TType.Struct)
                                {
                                    Err1 = new Xception();
                                    await Err1.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            case 2:
                                if (field.Type == TType.Struct)
                                {
                                    Err2 = new Xception2();
                                    await Err2.ReadAsync(iprot, cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testMultiException_result");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();

                    if(this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.Struct;
                            field.ID = 0;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Success.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    else if(this.__isset.err1)
                    {
                        if (Err1 != null)
                        {
                            field.Name = "Err1";
                            field.Type = TType.Struct;
                            field.ID = 1;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Err1.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    else if(this.__isset.err2)
                    {
                        if (Err2 != null)
                        {
                            field.Name = "Err2";
                            field.Type = TType.Struct;
                            field.ID = 2;
                            await oprot.WriteFieldBeginAsync(field, cancellationToken);
                            await Err2.WriteAsync(oprot, cancellationToken);
                            await oprot.WriteFieldEndAsync(cancellationToken);
                        }
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testMultiException_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Success: ");
                    sb.Append(Success== null ? "<null>" : Success.ToString());
                }
                if (Err1 != null && __isset.err1)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Err1: ");
                    sb.Append(Err1== null ? "<null>" : Err1.ToString());
                }
                if (Err2 != null && __isset.err2)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("Err2: ");
                    sb.Append(Err2== null ? "<null>" : Err2.ToString());
                }
                sb.Append(")");
                return sb.ToString();
            }
        }


        [DataContract(Namespace="")]
        public partial class testOnewayArgs : TBase
        {
            private int _secondsToSleep;

            [DataMember(Order = 0)]
            public int SecondsToSleep
            {
                get
                {
                    return _secondsToSleep;
                }
                set
                {
                    __isset.secondsToSleep = true;
                    this._secondsToSleep = value;
                }
            }


            [DataMember(Order = 1)]
            public Isset __isset;
            [DataContract]
            public struct Isset
            {
                [DataMember]
                public bool secondsToSleep;
            }

            #region XmlSerializer support

            public bool ShouldSerializeSecondsToSleep()
            {
                return __isset.secondsToSleep;
            }

            #endregion XmlSerializer support

            public testOnewayArgs()
            {
            }

            public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    await iprot.ReadStructBeginAsync(cancellationToken);
                    while (true)
                    {
                        field = await iprot.ReadFieldBeginAsync(cancellationToken);
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }

                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.I32)
                                {
                                    SecondsToSleep = await iprot.ReadI32Async(cancellationToken);
                                }
                                else
                                {
                                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                }
                                break;
                            default: 
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                                break;
                        }

                        await iprot.ReadFieldEndAsync(cancellationToken);
                    }

                    await iprot.ReadStructEndAsync(cancellationToken);
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    var struc = new TStruct("testOneway_args");
                    await oprot.WriteStructBeginAsync(struc, cancellationToken);
                    var field = new TField();
                    if (__isset.secondsToSleep)
                    {
                        field.Name = "secondsToSleep";
                        field.Type = TType.I32;
                        field.ID = 1;
                        await oprot.WriteFieldBeginAsync(field, cancellationToken);
                        await oprot.WriteI32Async(SecondsToSleep, cancellationToken);
                        await oprot.WriteFieldEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldStopAsync(cancellationToken);
                    await oprot.WriteStructEndAsync(cancellationToken);
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                var sb = new StringBuilder("testOneway_args(");
                bool __first = true;
                if (__isset.secondsToSleep)
                {
                    if(!__first) { sb.Append(", "); }
                    __first = false;
                    sb.Append("SecondsToSleep: ");
                    sb.Append(SecondsToSleep);
                }
                sb.Append(")");
                return sb.ToString();
            }
        }

    }
}
