/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Thrift.Test
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CrazyNesting : TBase
  {
    private string _string_field;
    private THashSet<Insanity> _set_field;
    private byte[] _binary_field;

    public string String_field
    {
      get
      {
        return _string_field;
      }
      set
      {
        __isset.string_field = true;
        this._string_field = value;
      }
    }

    public THashSet<Insanity> Set_field
    {
      get
      {
        return _set_field;
      }
      set
      {
        __isset.set_field = true;
        this._set_field = value;
      }
    }

    public List<Dictionary<THashSet<int>, Dictionary<int, THashSet<List<Dictionary<Insanity, string>>>>>> List_field { get; set; }

    public byte[] Binary_field
    {
      get
      {
        return _binary_field;
      }
      set
      {
        __isset.binary_field = true;
        this._binary_field = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool string_field;
      public bool set_field;
      public bool binary_field;
    }

    public CrazyNesting() {
    }

    public CrazyNesting(List<Dictionary<THashSet<int>, Dictionary<int, THashSet<List<Dictionary<Insanity, string>>>>>> list_field) : this() {
      this.List_field = list_field;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_list_field = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              String_field = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Set) {
              {
                Set_field = new THashSet<Insanity>();
                TSet _set9 = iprot.ReadSetBegin();
                for( int _i10 = 0; _i10 < _set9.Count; ++_i10)
                {
                  Insanity _elem11;
                  _elem11 = new Insanity();
                  _elem11.Read(iprot);
                  Set_field.Add(_elem11);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                List_field = new List<Dictionary<THashSet<int>, Dictionary<int, THashSet<List<Dictionary<Insanity, string>>>>>>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  Dictionary<THashSet<int>, Dictionary<int, THashSet<List<Dictionary<Insanity, string>>>>> _elem14;
                  {
                    _elem14 = new Dictionary<THashSet<int>, Dictionary<int, THashSet<List<Dictionary<Insanity, string>>>>>();
                    TMap _map15 = iprot.ReadMapBegin();
                    for( int _i16 = 0; _i16 < _map15.Count; ++_i16)
                    {
                      THashSet<int> _key17;
                      Dictionary<int, THashSet<List<Dictionary<Insanity, string>>>> _val18;
                      {
                        _key17 = new THashSet<int>();
                        TSet _set19 = iprot.ReadSetBegin();
                        for( int _i20 = 0; _i20 < _set19.Count; ++_i20)
                        {
                          int _elem21;
                          _elem21 = iprot.ReadI32();
                          _key17.Add(_elem21);
                        }
                        iprot.ReadSetEnd();
                      }
                      {
                        _val18 = new Dictionary<int, THashSet<List<Dictionary<Insanity, string>>>>();
                        TMap _map22 = iprot.ReadMapBegin();
                        for( int _i23 = 0; _i23 < _map22.Count; ++_i23)
                        {
                          int _key24;
                          THashSet<List<Dictionary<Insanity, string>>> _val25;
                          _key24 = iprot.ReadI32();
                          {
                            _val25 = new THashSet<List<Dictionary<Insanity, string>>>();
                            TSet _set26 = iprot.ReadSetBegin();
                            for( int _i27 = 0; _i27 < _set26.Count; ++_i27)
                            {
                              List<Dictionary<Insanity, string>> _elem28;
                              {
                                _elem28 = new List<Dictionary<Insanity, string>>();
                                TList _list29 = iprot.ReadListBegin();
                                for( int _i30 = 0; _i30 < _list29.Count; ++_i30)
                                {
                                  Dictionary<Insanity, string> _elem31;
                                  {
                                    _elem31 = new Dictionary<Insanity, string>();
                                    TMap _map32 = iprot.ReadMapBegin();
                                    for( int _i33 = 0; _i33 < _map32.Count; ++_i33)
                                    {
                                      Insanity _key34;
                                      string _val35;
                                      _key34 = new Insanity();
                                      _key34.Read(iprot);
                                      _val35 = iprot.ReadString();
                                      _elem31[_key34] = _val35;
                                    }
                                    iprot.ReadMapEnd();
                                  }
                                  _elem28.Add(_elem31);
                                }
                                iprot.ReadListEnd();
                              }
                              _val25.Add(_elem28);
                            }
                            iprot.ReadSetEnd();
                          }
                          _val18[_key24] = _val25;
                        }
                        iprot.ReadMapEnd();
                      }
                      _elem14[_key17] = _val18;
                    }
                    iprot.ReadMapEnd();
                  }
                  List_field.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
              isset_list_field = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Binary_field = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_list_field)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CrazyNesting");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (String_field != null && __isset.string_field) {
        field.Name = "string_field";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(String_field);
        oprot.WriteFieldEnd();
      }
      if (Set_field != null && __isset.set_field) {
        field.Name = "set_field";
        field.Type = TType.Set;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, Set_field.Count));
          foreach (Insanity _iter36 in Set_field)
          {
            _iter36.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      field.Name = "list_field";
      field.Type = TType.List;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Map, List_field.Count));
        foreach (Dictionary<THashSet<int>, Dictionary<int, THashSet<List<Dictionary<Insanity, string>>>>> _iter37 in List_field)
        {
          {
            oprot.WriteMapBegin(new TMap(TType.Set, TType.Map, _iter37.Count));
            foreach (THashSet<int> _iter38 in _iter37.Keys)
            {
              {
                oprot.WriteSetBegin(new TSet(TType.I32, _iter38.Count));
                foreach (int _iter39 in _iter38)
                {
                  oprot.WriteI32(_iter39);
                }
                oprot.WriteSetEnd();
              }
              {
                oprot.WriteMapBegin(new TMap(TType.I32, TType.Set, _iter37[_iter38].Count));
                foreach (int _iter40 in _iter37[_iter38].Keys)
                {
                  oprot.WriteI32(_iter40);
                  {
                    oprot.WriteSetBegin(new TSet(TType.List, _iter37[_iter38][_iter40].Count));
                    foreach (List<Dictionary<Insanity, string>> _iter41 in _iter37[_iter38][_iter40])
                    {
                      {
                        oprot.WriteListBegin(new TList(TType.Map, _iter41.Count));
                        foreach (Dictionary<Insanity, string> _iter42 in _iter41)
                        {
                          {
                            oprot.WriteMapBegin(new TMap(TType.Struct, TType.String, _iter42.Count));
                            foreach (Insanity _iter43 in _iter42.Keys)
                            {
                              _iter43.Write(oprot);
                              oprot.WriteString(_iter42[_iter43]);
                            }
                            oprot.WriteMapEnd();
                          }
                        }
                        oprot.WriteListEnd();
                      }
                    }
                    oprot.WriteSetEnd();
                  }
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteMapEnd();
          }
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (Binary_field != null && __isset.binary_field) {
        field.Name = "binary_field";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Binary_field);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CrazyNesting(");
      bool __first = true;
      if (String_field != null && __isset.string_field) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("String_field: ");
        __sb.Append(String_field);
      }
      if (Set_field != null && __isset.set_field) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Set_field: ");
        __sb.Append(Set_field);
      }
      if(!__first) { __sb.Append(", "); }
      __sb.Append("List_field: ");
      __sb.Append(List_field);
      if (Binary_field != null && __isset.binary_field) {
        __sb.Append(", Binary_field: ");
        __sb.Append(Binary_field);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
